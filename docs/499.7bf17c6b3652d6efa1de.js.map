{"version":3,"file":"499.7bf17c6b3652d6efa1de.js","mappings":"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","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRenderingObject.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\n\nexport abstract class FluidRenderingObject {\n    protected _scene: BABYLON.Scene;\n    protected _engine: BABYLON.Engine;\n    protected _effectsAreDirty: boolean;\n    protected _depthEffectWrapper: BABYLON.Nullable<BABYLON.EffectWrapper>;\n    protected _thicknessEffectWrapper: BABYLON.Nullable<BABYLON.EffectWrapper>;\n\n    public priority = 0;\n\n    protected _particleSize = 0.1;\n\n    public onParticleSizeChanged =\n        new BABYLON.Observable<FluidRenderingObject>();\n\n    public get particleSize() {\n        return this._particleSize;\n    }\n\n    public set particleSize(size: number) {\n        if (size === this._particleSize) {\n            return;\n        }\n\n        this._particleSize = size;\n        this.onParticleSizeChanged.notifyObservers(this);\n    }\n\n    public particleThicknessAlpha = 0.05;\n\n    public get useInstancing() {\n        return !this.indexBuffer;\n    }\n\n    private _useVelocity = true;\n\n    public get useVelocity() {\n        return this._useVelocity;\n    }\n\n    public set useVelocity(use: boolean) {\n        if (this._useVelocity === use || !this._hasVelocity()) {\n            return;\n        }\n\n        this._useVelocity = use;\n        this._effectsAreDirty = true;\n    }\n\n    private _hasVelocity() {\n        return !!this.vertexBuffers.velocity;\n    }\n\n    public getClassName(): string {\n        return \"FluidRenderingObject\";\n    }\n\n    constructor(\n        scene: BABYLON.Scene,\n        public readonly vertexBuffers: { [key: string]: BABYLON.VertexBuffer },\n        public readonly indexBuffer: BABYLON.Nullable<BABYLON.DataBuffer>\n    ) {\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        this._effectsAreDirty = true;\n        this._depthEffectWrapper = null;\n        this._thicknessEffectWrapper = null;\n    }\n\n    protected _createEffects(): void {\n        const uniformNames = [\"view\", \"projection\", \"particleRadius\", \"size\"];\n        const attributeNames = [\"position\", \"offset\"];\n        const defines: string[] = [];\n\n        this._effectsAreDirty = false;\n\n        if (this.useVelocity) {\n            attributeNames.push(\"velocity\");\n            defines.push(\"#define FLUIDRENDERING_VELOCITY\");\n        }\n\n        this._depthEffectWrapper = new BABYLON.EffectWrapper({\n            engine: this._engine,\n            useShaderStore: true,\n            vertexShader: \"fluidParticleDepth\",\n            fragmentShader: \"fluidParticleDepth\",\n            attributeNames,\n            uniformNames,\n            samplerNames: [],\n            defines,\n        });\n\n        uniformNames.push(\"particleAlpha\");\n\n        this._thicknessEffectWrapper = new BABYLON.EffectWrapper({\n            engine: this._engine,\n            useShaderStore: true,\n            vertexShader: \"fluidParticleThickness\",\n            fragmentShader: \"fluidParticleThickness\",\n            attributeNames: [\"position\", \"offset\"],\n            uniformNames,\n            samplerNames: [],\n        });\n    }\n\n    public isReady(): boolean {\n        if (this._effectsAreDirty) {\n            this._createEffects();\n        }\n\n        if (!this._depthEffectWrapper || !this._thicknessEffectWrapper) {\n            return false;\n        }\n\n        const depthEffect = this._depthEffectWrapper._drawWrapper.effect!;\n        const thicknessEffect =\n            this._thicknessEffectWrapper._drawWrapper.effect!;\n\n        return depthEffect.isReady() && thicknessEffect.isReady();\n    }\n\n    public numParticles(): number {\n        return 0;\n    }\n\n    public renderDepthTexture(): void {\n        const numParticles = this.numParticles();\n\n        if (!this._depthEffectWrapper || numParticles === 0) {\n            return;\n        }\n\n        const depthDrawWrapper = this._depthEffectWrapper._drawWrapper;\n        const depthEffect = depthDrawWrapper.effect!;\n\n        this._engine.enableEffect(depthDrawWrapper);\n        this._engine.bindBuffers(\n            this.vertexBuffers,\n            this.indexBuffer,\n            depthEffect\n        );\n\n        depthEffect.setMatrix(\"view\", this._scene.getViewMatrix());\n        depthEffect.setMatrix(\"projection\", this._scene.getProjectionMatrix());\n        depthEffect.setFloat2(\"size\", this._particleSize, this._particleSize);\n        depthEffect.setFloat(\"particleRadius\", this._particleSize / 2);\n\n        if (this.useInstancing) {\n            this._engine.drawArraysType(\n                BABYLON.Constants.MATERIAL_TriangleStripDrawMode,\n                0,\n                4,\n                numParticles\n            );\n        } else {\n            this._engine.drawElementsType(\n                BABYLON.Constants.MATERIAL_TriangleFillMode,\n                0,\n                numParticles\n            );\n        }\n    }\n\n    public renderThicknessTexture(): void {\n        const numParticles = this.numParticles();\n\n        if (!this._thicknessEffectWrapper || numParticles === 0) {\n            return;\n        }\n\n        const thicknessDrawWrapper = this._thicknessEffectWrapper._drawWrapper;\n        const thicknessEffect = thicknessDrawWrapper.effect!;\n\n        this._engine.setAlphaMode(BABYLON.Constants.ALPHA_ONEONE);\n        this._engine.setDepthWrite(false);\n\n        this._engine.enableEffect(thicknessDrawWrapper);\n        this._engine.bindBuffers(\n            this.vertexBuffers,\n            this.indexBuffer,\n            thicknessEffect\n        );\n\n        thicknessEffect.setMatrix(\"view\", this._scene.getViewMatrix());\n        thicknessEffect.setMatrix(\n            \"projection\",\n            this._scene.getProjectionMatrix()\n        );\n        thicknessEffect.setFloat(\"particleAlpha\", this.particleThicknessAlpha);\n        thicknessEffect.setFloat2(\n            \"size\",\n            this._particleSize,\n            this._particleSize\n        );\n\n        if (this.useInstancing) {\n            this._engine.drawArraysType(\n                BABYLON.Constants.MATERIAL_TriangleStripDrawMode,\n                0,\n                4,\n                numParticles\n            );\n        } else {\n            this._engine.drawElementsType(\n                BABYLON.Constants.MATERIAL_TriangleFillMode,\n                0,\n                numParticles\n            );\n        }\n\n        this._engine.setDepthWrite(true);\n        this._engine.setAlphaMode(BABYLON.Constants.ALPHA_DISABLE);\n    }\n\n    public renderDiffuseTexture(): void {\n        // do nothing by default\n    }\n\n    public dispose(): void {\n        this._depthEffectWrapper?.dispose();\n        this._thicknessEffectWrapper?.dispose();\n    }\n}\n"],"names":["FluidRenderingObject","constructor","scene","vertexBuffers","indexBuffer","priority","_particleSize","onParticleSizeChanged","particleThicknessAlpha","_useVelocity","this","_scene","_engine","getEngine","_effectsAreDirty","_depthEffectWrapper","_thicknessEffectWrapper","particleSize","size","notifyObservers","useInstancing","useVelocity","use","_hasVelocity","velocity","getClassName","_createEffects","uniformNames","attributeNames","defines","push","engine","useShaderStore","vertexShader","fragmentShader","samplerNames","isReady","depthEffect","_drawWrapper","effect","thicknessEffect","numParticles","renderDepthTexture","depthDrawWrapper","enableEffect","bindBuffers","setMatrix","getViewMatrix","getProjectionMatrix","setFloat2","setFloat","drawArraysType","drawElementsType","renderThicknessTexture","thicknessDrawWrapper","setAlphaMode","setDepthWrite","renderDiffuseTexture","dispose"],"sourceRoot":""}