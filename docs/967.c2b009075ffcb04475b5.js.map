{"version":3,"file":"967.c2b009075ffcb04475b5.js","mappings":"qNAAA,QAAe,IAA0B,uCCOlC,MAAMA,UAA0C,EAAAC,wBAGnDC,YAAYC,GACRC,MAAMD,GAAO,GAEbE,KAAKC,gBAAkB,IAC3B,CAEUC,a,QACN,MAAMC,EAC4B,QAA9B,EAAyB,QAAzB,EAAAH,KAAKI,OAAOC,qBAAa,eAAG,UAAE,QAAIL,KAAKI,OAAOE,aAE9CH,IACCA,EAAmCI,MAAQ,EAC3CJ,EAAmCK,KAAOC,KAAKC,GAAK,IACpDP,EAAmCQ,OAAS,IAOjDX,KAAKC,gBAAkB,IAAI,iBACvB,YALiB,IAOjBD,KAAKI,QAITJ,KAAKC,gBAAgBW,gBAAkB,IAAI,UACvC,EACAZ,KAAKI,QAETJ,KAAKC,gBAAgBY,UAAY,+BAGjCb,KAAKC,gBAAgBa,kBAAkB,EAAGL,KAAKC,GAAK,GAGpDV,KAAKC,gBAAgBc,OAAS,IAAI,SAAe,GAAK,IAAK,GAAK,GAChEf,KAAKC,gBAAgBe,OAAS,IAAI,SAAe,GAAK,IAAK,GAAK,GAChEhB,KAAKC,gBAAgBgB,UAAY,IAAI,SAAe,EAAG,EAAG,GAAK,GAC/DjB,KAAKC,gBAAgBgB,UAAY,IAAI,SAAe,GAAK,EAAK,GAAK,GAGnEjB,KAAKC,gBAAgBiB,QAAU,IAC/BlB,KAAKC,gBAAgBkB,QAAU,IAG/BnB,KAAKC,gBAAgBmB,YAAc,EACnCpB,KAAKC,gBAAgBoB,YAAc,IAGnCrB,KAAKC,gBAAgBqB,SAlCQ,IAqC7BtB,KAAKC,gBAAgBsB,QAAU,IAAI,UAAgB,GAAI,MAAO,GAG9DvB,KAAKC,gBAAgBuB,aAAe,IACpCxB,KAAKC,gBAAgBwB,aAAe,IACpCzB,KAAKC,gBAAgByB,YAAc,IAGnC1B,KAAKC,gBAAgB0B,cAAgB,IAErC3B,KAAKC,gBAAgB2B,QAErB5B,KAAKC,gBAAgB4B,eAAgB,EAErC7B,KAAK8B,eAAeC,mBAAmB/B,KAAKgC,oBAAoB,GAEhEhC,KAAKgC,mBACDhC,KAAK8B,eAAgBG,kCACjBjC,KAAKC,iBAGbD,KAAKgC,mBAAmBE,OAAOC,aAAe,IAC9CnC,KAAKgC,mBAAmBE,OAAOE,uBAAyB,IAEpDpC,KAAKgC,mBAAmBE,OAC1BG,mCAAoC,EACtCrC,KAAKgC,mBAAmBM,eAAeC,iBACnCvC,KAAKgC,mBAAmBE,OAAOE,uBACnCpC,KAAKgC,mBAAmBM,eAAeE,oBAAsB,GAC7DxC,KAAKgC,mBAAmBM,eAAeG,oBAAsB,GAC7DzC,KAAKgC,mBAAmBM,eAAeI,iBAAmB,KAC1D1C,KAAKgC,mBAAmBM,eAAeK,QAAU,EACjD3C,KAAKgC,mBAAmBM,eAAeM,aAAe,IACtD5C,KAAKgC,mBAAmBM,eAAeO,WAAa,IAAI,SACpD,IAAM,IACN,IAAM,IACN,GAEJ7C,KAAKgC,mBAAmBM,eAAeQ,wBAAyB,EAEhE/C,MAAMgD,MACV,CAEOC,U,MACHjD,MAAMiD,UAEc,QAApB,EAAAhD,KAAKC,uBAAe,SAAE+C,SAC1B,CAEUC,mBAKWjD,KAAKkD,KAGjBC,IAPU,CACXC,QAAQ,GAMK,UACZC,KAAK,SACLC,UAAUC,IACPvD,KAAKC,gBAAiByB,YAAc6B,EAAQ,EAAI,GAAI,GAEhE,E","sources":["webpack://babylonjs-fluid-rendering/./src/assets/pictures/flare32bits.png","webpack://babylonjs-fluid-rendering/./src/scenes/fluidSimulationDemoParticleSystem.ts"],"sourcesContent":["export default __webpack_public_path__ + \"7c78419fe3f98a530df81b3e7a40909f.png\";","import * as BABYLON from \"@babylonjs/core\";\n\nimport { FluidSimulationDemoBase } from \"./fluidSimulationDemoBase\";\nimport { FluidRenderingObjectParticleSystem } from \"./FluidRenderer/fluidRenderingObjectParticleSystem\";\n\nimport flareImg from \"../assets/pictures/flare32bits.png\";\n\nexport class FluidSimulationDemoParticleSystem extends FluidSimulationDemoBase {\n    private _particleSystem: BABYLON.Nullable<BABYLON.ParticleSystem>;\n\n    constructor(scene: BABYLON.Scene) {\n        super(scene, true);\n\n        this._particleSystem = null;\n    }\n\n    protected async _run() {\n        const camera =\n            this._scene.activeCameras?.[0] ?? this._scene.activeCamera;\n\n        if (camera) {\n            (camera as BABYLON.ArcRotateCamera).alpha = 0;\n            (camera as BABYLON.ArcRotateCamera).beta = Math.PI / 2.4;\n            (camera as BABYLON.ArcRotateCamera).radius = 30;\n        }\n\n        const numParticles = 20000 * 2;\n        const numParticlesEmitRate = 1500 * 2;\n\n        // Create a particle system\n        this._particleSystem = new BABYLON.ParticleSystem(\n            \"particles\",\n            numParticles,\n            this._scene\n        );\n\n        //Texture of each particle\n        this._particleSystem.particleTexture = new BABYLON.Texture(\n            flareImg,\n            this._scene\n        );\n        this._particleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_ADD;\n\n        // Where the particles come from\n        this._particleSystem.createConeEmitter(4, Math.PI / 2);\n\n        // Colors of all particles\n        this._particleSystem.color1 = new BABYLON.Color4(0.4, 1.5, 0.3, 1.0);\n        this._particleSystem.color2 = new BABYLON.Color4(0.4, 1.5, 0.3, 1.0);\n        this._particleSystem.colorDead = new BABYLON.Color4(0, 0, 0.2, 0.0);\n        this._particleSystem.colorDead = new BABYLON.Color4(0.4, 1.0, 0.3, 1.0);\n\n        // Size of each particle (random between...\n        this._particleSystem.minSize = 0.5 * 1.5;\n        this._particleSystem.maxSize = 0.5 * 1.5;\n\n        // Life time of each particle (random between...\n        this._particleSystem.minLifeTime = 2.0;\n        this._particleSystem.maxLifeTime = 2.5;\n\n        // Emission rate\n        this._particleSystem.emitRate = numParticlesEmitRate;\n\n        // Set the gravity of all particles\n        this._particleSystem.gravity = new BABYLON.Vector3(0, -10.81, 0);\n\n        // Speed\n        this._particleSystem.minEmitPower = 2.5;\n        this._particleSystem.maxEmitPower = 6.5;\n        this._particleSystem.updateSpeed = 0.02;\n\n        // Start the particle system\n        this._particleSystem.preWarmCycles = 60 * 8;\n\n        this._particleSystem.start();\n\n        this._particleSystem.renderAsFluid = true;\n\n        this._fluidRenderer.removeRenderObject(this._fluidRenderObject, true);\n\n        this._fluidRenderObject =\n            this._fluidRenderer!.getRenderObjectFromParticleSystem(\n                this._particleSystem\n            )!;\n\n        this._fluidRenderObject.object.particleSize = 0.75;\n        this._fluidRenderObject.object.particleThicknessAlpha = 0.02;\n        (\n            this._fluidRenderObject.object as FluidRenderingObjectParticleSystem\n        ).useTrueRenderingForDiffuseTexture = true;\n        this._fluidRenderObject.targetRenderer.minimumThickness =\n            this._fluidRenderObject.object.particleThicknessAlpha;\n        this._fluidRenderObject.targetRenderer.blurDepthFilterSize = 10;\n        this._fluidRenderObject.targetRenderer.blurDepthDepthScale = 10;\n        this._fluidRenderObject.targetRenderer.thicknessMapSize = 1024;\n        this._fluidRenderObject.targetRenderer.density = 8;\n        this._fluidRenderObject.targetRenderer.fresnelClamp = 0.04;\n        this._fluidRenderObject.targetRenderer.fluidColor = new BABYLON.Color3(\n            219 / 255,\n            228 / 255,\n            1\n        );\n        this._fluidRenderObject.targetRenderer.generateDiffuseTexture = false;\n\n        super._run();\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this._particleSystem?.dispose();\n    }\n\n    protected _makeGUIMainMenu(): void {\n        const params = {\n            paused: false,\n        };\n\n        const mainMenu = this._gui!;\n\n        mainMenu\n            .add(params, \"paused\")\n            .name(\"Pause\")\n            .onChange((value: boolean) => {\n                this._particleSystem!.updateSpeed = value ? 0 : 0.02;\n            });\n    }\n}\n"],"names":["FluidSimulationDemoParticleSystem","FluidSimulationDemoBase","constructor","scene","super","this","_particleSystem","async","camera","_scene","activeCameras","activeCamera","alpha","beta","Math","PI","radius","particleTexture","blendMode","createConeEmitter","color1","color2","colorDead","minSize","maxSize","minLifeTime","maxLifeTime","emitRate","gravity","minEmitPower","maxEmitPower","updateSpeed","preWarmCycles","start","renderAsFluid","_fluidRenderer","removeRenderObject","_fluidRenderObject","getRenderObjectFromParticleSystem","object","particleSize","particleThicknessAlpha","useTrueRenderingForDiffuseTexture","targetRenderer","minimumThickness","blurDepthFilterSize","blurDepthDepthScale","thicknessMapSize","density","fresnelClamp","fluidColor","generateDiffuseTexture","_run","dispose","_makeGUIMainMenu","_gui","add","paused","name","onChange","value"],"sourceRoot":""}