{"version":3,"file":"419.0f9440ae262c45bce7a9.js","mappings":"wMAEO,MAAMA,EA6ETC,YACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAsB,8BACtBC,EAAwB,4BACxBC,EAA0B,8BAC1BC,EAA4B,4BAC5BC,GAAkB,EAClBC,EAA2C,KAC3CC,GAAsB,EACtBC,EAAU,GAnEP,KAAAC,YAAa,EAEb,KAAAC,gBAAkB,EAElB,KAAAC,eAAiB,EAEhB,KAAAC,mBAAqB,EAsBtB,KAAAC,kBAAoB,IAEpB,KAAAC,eAAiB,GAEjB,KAAAC,aAAe,IAEf,KAAAC,oBACH,IAAI,aAkCJC,KAAKC,MAAQvB,EACbsB,KAAKE,OAASvB,EACdqB,KAAKG,QAAUd,EACfW,KAAKI,QAAUzB,EAAM0B,YACrBL,KAAKM,OAAS1B,EACdoB,KAAKO,QAAU1B,EACfmB,KAAKQ,kBAAoB1B,EACzBkB,KAAKS,kBAAoB1B,EACzBiB,KAAKU,aAAe1B,EACpBgB,KAAKW,eAAiB1B,EACtBe,KAAKY,iBAAmB1B,EACxBc,KAAKa,mBAAqB1B,EAC1Ba,KAAKc,iBAAmB1B,EACxBY,KAAKe,qBAAuBzB,EAC5BU,KAAKgB,SAAWzB,EAChBS,KAAKiB,yBAA2B,EAChCjB,KAAKR,WAAkC,IAArBV,GAA+C,IAArBC,EAE5CiB,KAAKkB,IAAM,KACXlB,KAAKmB,SAAW,KAChBnB,KAAKoB,QAAU,KACfpB,KAAKqB,gBAAkB,KACvBrB,KAAKsB,mBAAqB,IAC9B,CApFWC,wBACP,OAAOvB,KAAKL,kBAChB,CAEW4B,sBAAkBC,GACzB,GAAIxB,KAAKL,qBAAuB6B,IAIhCxB,KAAKL,mBAAqB6B,EACM,OAA5BxB,KAAKsB,oBAA6B,CAClC,MAAMG,EAAQzB,KAAKsB,mBAAmB,GAChCI,EAAQ1B,KAAKsB,mBAAmB,GAEtCtB,KAAKsB,mBAAqB,IACnBK,MAAgC,EAA1B3B,KAAKL,oBAAwBiC,QACxCC,KAAKC,GAAe,EAANA,EAAUJ,EAAQD,G,CAE1C,CAWWM,mBACP,OAAO/B,KAAKkB,GAChB,CAEWc,uBACP,OAAOhC,KAAKoB,OAChB,CAEWa,cACP,OAAOjC,KAAKmB,QAChB,CAEWe,kBACP,OAAOlC,KAAKqB,eAChB,CA2COc,aAKH,GAJAnC,KAAKoC,UAELpC,KAAKqC,sBAEDrC,KAAKR,YAAcQ,KAAKmB,SAAU,CAClC,MAAOmB,EAAQC,EAAgBC,GAC3BxC,KAAKyC,yBACDzC,KAAKmB,SACLnB,KAAKY,iBACLZ,KAAKa,mBACLb,KAAKP,gBACLO,KAAKC,MACLD,KAAKc,kBAEbd,KAAKoB,QAAUkB,EACftC,KAAKqB,gBAAkBkB,EACvBvC,KAAKsB,mBAAqBkB,C,CAElC,CAEOE,yBACC1C,KAAKR,YAAcQ,KAAKsB,qBACxBtB,KAAKiB,yBAA2B,EAChCjB,KAAKE,OAAOyC,mBAAmBC,aAC3B5C,KAAKsB,mBACLtB,KAAKoB,SACL,GAEJpB,KAAKI,QAAQyC,kBAAkB7C,KAAKoB,SAE5C,CAEUiB,sBACNrC,KAAKkB,IAAMlB,KAAKI,QAAQ0C,0BACpB,CAAElE,MAAOoB,KAAKM,OAAQzB,OAAQmB,KAAKO,SACnC,CACIwC,iBAAiB,EACjBC,KAAMhD,KAAKU,aACXuC,OAAQjD,KAAKW,eACbuC,aAAc,yCACd5D,oBAAqBU,KAAKe,qBAC1BoC,uBAAuB,EACvB5D,QAASS,KAAKgB,WAItB,MAAMoC,EAAgBpD,KAAKkB,IAAIe,QAE/BjC,KAAKmB,SAAW,IAAI,UAAgB,KAAMnB,KAAKE,QAC/CF,KAAKmB,SAASzC,KAAO,MAAQsB,KAAKC,MAClCD,KAAKmB,SAASA,SAAWiC,EACzBpD,KAAKmB,SAASkC,MAAQ,4BACtBrD,KAAKmB,SAASmC,MAAQ,4BACtBtD,KAAKmB,SAASoC,0BAA4B,CAC9C,CAEUd,yBACNe,EACAxE,EACAC,EACAQ,EACAgE,EACArE,GAAkB,GAElB,MAAMsE,EAAS1D,KAAKE,OAAOG,YACrBsD,EAAa,IAAI,UACnBC,KAAKC,MAAM7D,KAAKQ,kBAAoBf,GACpCmE,KAAKC,MAAM7D,KAAKS,kBAAoBhB,IAElCqE,EACD9E,IAAgB,+BACb0E,EAAOK,UAAUC,6BACpBhF,IAAgB,oCACb0E,EAAOK,UAAUE,gCAEnB3B,EAAStC,KAAKI,QAAQ0C,0BACxB,CAAElE,MAAO+E,EAAWO,EAAGrF,OAAQ8E,EAAWQ,GAC1C,CACIpB,iBAAiB,EACjBC,KAAMhE,EACNiE,OAAQhE,EACRiE,aAAcY,EACR,0CACA,yCACNxE,qBAAqB,EACrB6D,uBAAuB,EACvB5D,QAASS,KAAKgB,WAIhBoC,EAAgBd,EAAOL,QAEvBA,EAAU,IAAI,UAAgB,KAAMjC,KAAKE,QAO/C,GANA+B,EAAQvD,KAAO,aAAe+E,EAC9BxB,EAAQd,SAAWiC,EACnBnB,EAAQoB,MAAQ,4BAChBpB,EAAQqB,MAAQ,4BAChBrB,EAAQsB,0BAA4B,EAEhCnE,EAAiB,CACjB,MAAMgF,EAAyB,IAAI,cAC/B,iBACA,eACA,CAAC,aAAc,WACf,KACA,EACA,KACA,yCACAV,GACA,EACA,KACA1E,OACAqF,OACAA,OACAA,EACApF,GAEJmF,EAAuB7E,QAAUS,KAAKgB,SACtCoD,EAAuBE,+BAAgC,EACvDF,EAAuBG,kBAAkBC,KAAKC,IACJ,IAAlCzE,KAAKiB,yBACLwD,EAAOC,WAAW,iBAAkBlB,GAEpCiB,EAAOE,aACH,iBACAP,EAAuBQ,aAAa3C,SAG5CwC,EAAOI,OAAO,aAAc7E,KAAKN,gBACjC+E,EAAOK,UAAU,UAAW,EAAI9E,KAAKQ,kBAAmB,GACxDR,KAAKiB,0BAA0B,IAEnCmD,EAAuBW,wBAAwBP,KAAI,KAC/CJ,EAAuBY,UAAUC,SAASC,IACtCA,EAAGjD,QAASoB,MAAQ,4BACpB6B,EAAGjD,QAASqB,MAAQ,2BAAiC,GACvD,IAENtD,KAAKmF,wBAAwBf,GAE7B,MAAMgB,EAAyB,IAAI,cAC/B,iBACA,eACA,CAAC,aAAc,WACf,KACA,EACA,KACA,yCACA1B,GACA,EACA,KACA1E,OACAqF,OACAA,OACAA,EACApF,GAmBJ,OAjBAmG,EAAuB7F,QAAUS,KAAKgB,SACtCoE,EAAuBb,kBAAkBC,KAAKC,IAC1CA,EAAOI,OAAO,aAAc7E,KAAKN,gBACjC+E,EAAOK,UAAU,UAAW,EAAG,EAAI9E,KAAKS,mBACxCT,KAAKiB,0BAA0B,IAEnCmE,EAAuBL,wBAAwBP,KAAI,KAC/CY,EAAuBJ,UAAUC,SAASC,IACtCA,EAAGjD,QAASoB,MAAQ,4BACpB6B,EAAGjD,QAASqB,MAAQ,2BAAiC,GACvD,IAENtD,KAAKmF,wBAAwBC,GAE7BhB,EAAuBiB,WAAY,EACnCD,EAAuBC,WAAY,EAE5B,CACH/C,EACAL,EACA,IAAIN,MAAgC,EAA1B3B,KAAKL,oBAAwBiC,QAAQC,KAAKC,GAC1C,EAANA,EAAUsD,EAAyBhB,I,CAGxC,CACH,MAAMkB,EAAqB,CACvB,gBACA,UACA,4BACA,kBAGElB,EAAyB,IAAI,cAC/B,iBACA,gBACAkB,EACA,KACA,EACA,KACA,yCACA5B,GACA,EACA,KACA1E,OACAqF,OACAA,OACAA,EACApF,GAEJmF,EAAuB7E,QAAUS,KAAKgB,SACtCoD,EAAuBE,+BAAgC,EACvDF,EAAuBG,kBAAkBC,KAAKC,IACJ,IAAlCzE,KAAKiB,yBACLwD,EAAOC,WAAW,iBAAkBlB,GAEpCiB,EAAOE,aACH,iBACAP,EAAuBQ,aAAa3C,SAG5CwC,EAAOI,OAAO,gBAAiB7E,KAAKJ,mBACpC6E,EAAOK,UAAU,UAAW,EAAI9E,KAAKQ,kBAAmB,GACxDiE,EAAOc,SACH,4BACAvF,KAAKwF,iCAETf,EAAOc,SAAS,iBAAkBvF,KAAKyF,sBACvCzF,KAAKiB,0BAA0B,IAEnCmD,EAAuBW,wBAAwBP,KAAI,KAC/CJ,EAAuBY,UAAUC,SAASC,IACtCA,EAAGjD,QAASoB,MAAQ,4BACpB6B,EAAGjD,QAASqB,MAAQ,2BAAiC,GACvD,IAENtD,KAAKmF,wBAAwBf,GAE7B,MAAMgB,EAAyB,IAAI,cAC/B,iBACA,gBACAE,EACA,KACA,EACA,KACA,yCACA5B,GACA,EACA,KACA1E,OACAqF,OACAA,OACAA,EACApF,GAwBJ,OAtBAmG,EAAuB7F,QAAUS,KAAKgB,SACtCoE,EAAuBb,kBAAkBC,KAAKC,IAC1CA,EAAOI,OAAO,gBAAiB7E,KAAKJ,mBACpC6E,EAAOK,UAAU,UAAW,EAAG,EAAI9E,KAAKS,mBACxCgE,EAAOc,SACH,4BACAvF,KAAKwF,iCAETf,EAAOc,SAAS,iBAAkBvF,KAAKyF,sBACvCzF,KAAKiB,0BAA0B,IAEnCmE,EAAuBL,wBAAwBP,KAAI,KAC/CY,EAAuBJ,UAAUC,SAASC,IACtCA,EAAGjD,QAASoB,MAAQ,4BACpB6B,EAAGjD,QAASqB,MAAQ,2BAAiC,GACvD,IAENtD,KAAKmF,wBAAwBC,GAE7BhB,EAAuBiB,WAAY,EACnCD,EAAuBC,WAAY,EAE5B,CACH/C,EACAL,EACA,IAAIN,MAAgC,EAA1B3B,KAAKL,oBAAwBiC,QAAQC,KAAKC,GAC1C,EAANA,EAAUsD,EAAyBhB,I,CAInD,CAEQe,wBAAwBO,GACvBA,EAAGC,eAIRD,EAAGE,qBAAqBpB,KAAI,KAExBkB,EAAGG,0BAA4BH,EAAGG,yBAA2B,GAAK,CAAC,IAEvEH,EAAGnB,kBAAkBC,KAAI,KAErBkB,EAAGG,0BAA4BH,EAAGG,yBAA2B,GAAK,CAAC,IAE3E,CAEQL,gC,QACJ,OACKxF,KAAKN,eACFM,KAAKF,aACL,KACCE,KAAKO,QAAU,GACpBqD,KAAKkC,KAAsB,QAAjB,EAAY,QAAZ,EAAA9F,KAAKG,eAAO,eAAE4F,WAAG,QAAK,GAAKnC,KAAKoC,GAAM,KAAO,EAE/D,CAEQP,qBACJ,OAAQzF,KAAKF,aAAe,EAAKE,KAAKH,cAC1C,CAEOuC,U,QACCpC,KAAKD,oBAAoBkG,gBACzBjG,KAAKD,oBAAoBmG,gBAAgBlG,MAGrC,QAAR,EAAAA,KAAKkB,WAAG,SAAEkB,UACVpC,KAAKkB,IAAM,KACC,QAAZ,EAAAlB,KAAKoB,eAAO,SAAEgB,UACdpC,KAAKoB,QAAU,KACXpB,KAAKsB,qBACLtB,KAAKsB,mBAAmB,GAAGc,UAC3BpC,KAAKsB,mBAAmB,GAAGc,WAE/BpC,KAAKsB,mBAAqB,IAC9B,E,kGC1bQ6E,E,qBAAZ,SAAYA,GACR,mCACA,iDACA,2CACA,yDACA,uCACA,yBACA,0CACH,CARD,CAAYA,IAAAA,EAAmB,KAUxB,MAAMC,EAsWT3H,YAAYE,EAAsBU,GAjV1B,KAAAgH,yBAA0B,EAe3B,KAAAC,WAAa,IAAI,SAAe,KAAO,MAAQ,MAC/C,KAAAC,aAAe,IAAI,SAAe,EAAI,GAAI,IAE1C,KAAAC,QAAU,EAEV,KAAAC,mBAAqB,EAErB,KAAAC,aAAe,IAEf,KAAAC,cAAgB,IAEhB,KAAAC,iBAAmB,EAEnB,KAAAC,SAA4B,IAAI,WAClC,GACA,EACD,GACFC,YAEM,KAAAC,cACJZ,EAAoBa,oBAehB,KAAAC,QAAS,EAeT,KAAAC,kBAAmB,EAenB,KAAAC,sBAAwB,EAexB,KAAAC,qBAAuB,EAevB,KAAAC,wBAA0B,EAe1B,KAAAC,wBAA0B,IAe1B,KAAAC,qBAAuB,GAevB,KAAAC,sBAAuB,EAevB,KAAAC,0BAA4B,EAe5B,KAAAC,yBAA2B,EAe3B,KAAAC,4BAA8B,EAe9B,KAAAC,oBAAqB,EAkBtB,KAAAC,qBACH,IAAI,aAEA,KAAAC,cAAe,EAgBf,KAAAC,cAA0C,KAe1C,KAAAC,kBAA8C,KAe9C,KAAAC,gBAA4C,KAgB5C,KAAAjH,SAAW,EAwCfhB,KAAKE,OAASvB,EACdqB,KAAKI,QAAUzB,EAAM0B,YACrBL,KAAKG,QAAUd,QAAAA,EAAUV,EAAMuJ,aAC/BlI,KAAKmI,qBAAsB,EAC3BnI,KAAKoI,gBAAkB,KAEvBpI,KAAKqI,qBAAuB,IAAI,SAChCrI,KAAKsI,iBAAmB,IAAI,SAAe,IAAK,IAAK,IAAK,GAC1DtI,KAAKuI,qBAAuB,IAAI,SAAe,EAAG,EAAG,EAAG,GAExDvI,KAAKwI,mBAAqB,KAC1BxI,KAAKyI,qBAAuB,KAC5BzI,KAAK0I,uBAAyB,KAE9B1I,KAAK2I,mBAAqB,IAC9B,CArWWC,yBACP,OAAO5I,KAAKmI,mBAChB,CAIWU,6BACP,OAAO7I,KAAKqG,uBAChB,CAEWwC,2BAAuBC,GAC1B9I,KAAKqG,0BAA4ByC,IAIrC9I,KAAKqG,wBAA0ByC,EAC/B9I,KAAKmI,qBAAsB,EAC/B,CAwBWY,mBACP,OAAO/I,KAAK+G,aAChB,CAEWgC,iBAAaC,GAChBhJ,KAAK+G,gBAAkBiC,IAI3BhJ,KAAKmI,qBAAsB,EAC3BnI,KAAK+G,cAAgBiC,EACzB,CAIWC,YACP,OAAOjJ,KAAKiH,MAChB,CAEWgC,UAAMA,GACTjJ,KAAKiH,SAAWgC,IAIpBjJ,KAAKiH,OAASgC,EACdjJ,KAAKmI,qBAAsB,EAC/B,CAIWe,sBACP,OAAOlJ,KAAKkH,gBAChB,CAEWgC,oBAAgBC,GACnBnJ,KAAKkH,mBAAqBiC,IAI9BnJ,KAAKkH,iBAAmBiC,EACxBnJ,KAAKmI,qBAAsB,EAC/B,CAIWiB,2BACP,OAAOpJ,KAAKmH,qBAChB,CAEWiC,yBAAqBC,GACxBrJ,KAAKmH,wBAA0BkC,IAInCrJ,KAAKmH,sBAAwBkC,EAC7BrJ,KAAKmI,qBAAsB,EAC/B,CAIWmB,0BACP,OAAOtJ,KAAKoH,oBAChB,CAEWkC,wBAAoBC,GACvBvJ,KAAKoH,uBAAyBmC,IAIlCvJ,KAAKoH,qBAAuBmC,EAC5BvJ,KAAKwJ,qBACT,CAIWC,6BACP,OAAOzJ,KAAKqH,uBAChB,CAEWoC,2BAAuBjI,GAC1BxB,KAAKqH,0BAA4B7F,IAIrCxB,KAAKqH,wBAA0B7F,EAC/BxB,KAAKwJ,qBACT,CAIWE,6BACP,OAAO1J,KAAKsH,uBAChB,CAEWoC,2BAAuBC,GAC1B3J,KAAKsH,0BAA4BqC,IAIrC3J,KAAKsH,wBAA0BqC,EAC/B3J,KAAKwJ,qBACT,CAIWI,0BACP,OAAO5J,KAAKuH,oBAChB,CAEWqC,wBAAoBP,GACvBrJ,KAAKuH,uBAAyB8B,IAIlCrJ,KAAKuH,qBAAuB8B,EAC5BrJ,KAAKwJ,qBACT,CAIWK,0BACP,OAAO7J,KAAKwH,oBAChB,CAEWqC,wBAAoBV,GACvBnJ,KAAKwH,uBAAyB2B,IAIlCnJ,KAAKwH,qBAAuB2B,EAC5BnJ,KAAKmI,qBAAsB,EAC/B,CAIW2B,+BACP,OAAO9J,KAAKyH,yBAChB,CAEWqC,6BAAyBT,GAC5BrJ,KAAKyH,4BAA8B4B,IAIvCrJ,KAAKyH,0BAA4B4B,EACjCrJ,KAAKmI,qBAAsB,EAC/B,CAIW4B,8BACP,OAAO/J,KAAK0H,wBAChB,CAEWqC,4BAAwBR,GAC3BvJ,KAAK0H,2BAA6B6B,IAItCvJ,KAAK0H,yBAA2B6B,EAChCvJ,KAAKwJ,qBACT,CAIWQ,iCACP,OAAOhK,KAAK2H,2BAChB,CAEWqC,+BAA2BxI,GAC9BxB,KAAK2H,8BAAgCnG,IAIzCxB,KAAK2H,4BAA8BnG,EACnCxB,KAAKwJ,qBACT,CAIWS,wBACP,OAAOjK,KAAK4H,kBAChB,CAEWqC,sBAAkBC,GACrBlK,KAAK4H,qBAAuBsC,IAIhClK,KAAK4H,mBAAqBsC,EAC1BlK,KAAKmI,qBAAsB,EAC/B,CAUWgC,kBACP,OAAOnK,KAAK8H,YAChB,CAEWqC,gBAAYD,GACflK,KAAK8H,eAAiBoC,IAI1BlK,KAAK8H,aAAeoC,EACpBlK,KAAKmI,qBAAsB,EAC3BnI,KAAK6H,qBAAqB3B,gBAAgBlG,MAC9C,CAIWoK,mBACP,OAAOpK,KAAK+H,aAChB,CAEWqC,iBAAaC,GAChBrK,KAAK+H,gBAAkBsC,IAI3BrK,KAAK+H,cAAgBsC,EACrBrK,KAAKmI,qBAAsB,EAC/B,CAIWmC,uBACP,OAAOtK,KAAKgI,iBAChB,CAEWsC,qBAAiBD,GACpBrK,KAAKgI,oBAAsBqC,IAI/BrK,KAAKgI,kBAAoBqC,EACzBrK,KAAKmI,qBAAsB,EAC/B,CAIWoC,qBACP,OAAOvK,KAAKiI,eAChB,CAEWsC,mBAAeF,GAClBrK,KAAKiI,kBAAoBoC,IAI7BrK,KAAKiI,gBAAkBoC,EACvBrK,KAAKmI,qBAAsB,EAC/B,CAKW5I,cACP,OAAOS,KAAKgB,QAChB,CAEWzB,YAAQA,GACXS,KAAKgB,WAAazB,IAItBS,KAAKgB,SAAWzB,EAChBS,KAAKmI,qBAAsB,EAC/B,CAEW9I,aACP,OAAOW,KAAKG,OAChB,CAGWqK,wBACP,OAAOxK,KAAK2I,kBAChB,CAGW8B,wBACP,OAAOzK,KAAKwI,kBAChB,CAGWkC,4BACP,OAAO1K,KAAK0I,sBAChB,CAGWiC,0BACP,OAAO3K,KAAKyI,oBAChB,CAoBOtG,a,UACHnC,KAAKoC,UAELpC,KAAKmI,qBAAsB,EAE3B,MAAMyC,EAA+B,QAAlB,EAAA5K,KAAK+H,qBAAa,QAAI/H,KAAKI,QAAQyK,iBAChDC,EACqB,OAAvB9K,KAAK+H,cACCnE,KAAKmH,MACA/K,KAAK+H,cAAgB/H,KAAKI,QAAQ4K,kBAC/BhL,KAAKI,QAAQyK,kBAErB7K,KAAKI,QAAQ4K,kBAqBvB,GAnBAhL,KAAKwI,mBAAqB,IAAI,EAAAhK,2BAC1B,QACAwB,KAAKE,OACL0K,EACAE,EACAF,EACAE,EACA,8BACA,6BACA,8BACA,8BACA,EACA9K,KAAKG,SACL,EACAH,KAAKgB,UAGThB,KAAKiL,wBAAwBjL,KAAKwI,oBAE9BxI,KAAK6I,uBAAwB,CAC7B,MAAMqC,EACkB,QAApB,EAAAlL,KAAKiI,uBAAe,QAAIjI,KAAKI,QAAQyK,iBACnCM,EACuB,OAAzBnL,KAAKiI,gBACCrE,KAAKmH,MACA/K,KAAKiI,gBACFjI,KAAKI,QAAQ4K,kBACbhL,KAAKI,QAAQyK,kBAErB7K,KAAKI,QAAQ4K,kBAEvBhL,KAAKyI,qBAAuB,IAAI,EAAAjK,2BAC5B,UACAwB,KAAKE,OACLgL,EACAC,EACA,EACA,EACA,sCACA,+BACA,sCACA,gCACA,EACAnL,KAAKG,SACL,EACAH,KAAKgB,UAGThB,KAAKiL,wBAAwBjL,KAAKyI,qB,CAGtC,MAAM2C,EACoB,QAAtB,EAAApL,KAAKgI,yBAAiB,QAAIhI,KAAKI,QAAQyK,iBACrCQ,EACyB,OAA3BrL,KAAKgI,kBACCpE,KAAKmH,MACA/K,KAAKgI,kBACFhI,KAAKI,QAAQ4K,kBACbhL,KAAKI,QAAQyK,kBAErB7K,KAAKI,QAAQ4K,kBAElBhL,KAAK4H,qBACN5H,KAAK0I,uBAAyB,IAAI,EAAAlK,2BAC9B,YACAwB,KAAKE,OACLkL,EACAC,EACAD,EACAC,EACA,mCACA,4BACA,mCACA,6BACA,EACArL,KAAKG,SACL,EACAH,KAAKgB,UAGThB,KAAKiL,wBAAwBjL,KAAK0I,yBAGtC1I,KAAKsL,mCACT,CAEU9B,mBACNzH,EAA6D,MAExC,OAAjBA,GAAyBA,IAAiB/B,KAAKwI,oBAC/CxI,KAAKuL,0BAGY,OAAjBxJ,GACAA,IAAiB/B,KAAK0I,wBAEtB1I,KAAKwL,6BAEb,CAEUD,0BACDvL,KAAKwI,qBAGVxI,KAAKwI,mBAAmB9I,eAAiBM,KAAKsJ,oBAC9CtJ,KAAKwI,mBAAmB5I,kBAAoBI,KAAK0J,uBACjD1J,KAAKwI,mBAAmBjH,kBAAoBvB,KAAKyJ,uBACjDzJ,KAAKwI,mBAAmB3I,eAAiBG,KAAK4J,oBAClD,CAEU4B,8BACDxL,KAAK0I,yBAGV1I,KAAK0I,uBAAuBhJ,eACxBM,KAAK+J,wBACT/J,KAAK0I,uBAAuBnH,kBACxBvB,KAAKgK,2BACb,CAEUiB,wBACNlJ,GAEIA,IAAiB/B,KAAKyI,uBACtB1G,EAAavC,WACTuC,IAAiB/B,KAAKwI,mBAChBxI,KAAKkJ,gBACLlJ,KAAK6J,oBACf9H,EAAatC,gBACTsC,IAAiB/B,KAAKwI,mBAChBxI,KAAKoJ,qBACLpJ,KAAK8J,0BAGnB9J,KAAKwJ,mBAAmBzH,GAExBA,EAAaI,YACjB,CAEUmJ,oCACN,MAAM5H,EAAS1D,KAAKE,OAAOG,YAErBoL,EAAe,CACjB,aACA,mBACA,sBACA,YACA,WACA,YACA,UACA,qBACA,eACA,gBACA,gBAEEC,EAAe,CAAC,eAAgB,qBAChCC,EAAU,GAIhB,GAFA3L,KAAKoC,SAAQ,IAERpC,KAAKG,QACN,OAGJ,MAAM8B,EAAUjC,KAAKwI,mBAAoBhJ,WACnCQ,KAAKwI,mBAAoBtG,YACzBlC,KAAKwI,mBAAoBvG,QACzB2J,EAAY,IAAI,UAClB,EAAI3J,EAAQ4J,UAAUjN,MACtB,EAAIqD,EAAQ4J,UAAUhN,QAGtBmB,KAAKyI,sBACLiD,EAAaI,KAAK,kBAClBH,EAAQG,KAAK,0CAEbL,EAAaK,KAAK,gBAGlB9L,KAAK8H,eACL4D,EAAaI,KAAK,mBAClBH,EAAQG,KAAK,oCAGb9L,KAAK4H,oBACL6D,EAAaK,KAAK,aAClBJ,EAAaI,KAAK,kBAClBH,EAAQG,KAAK,4CAEbL,EAAaK,KAAK,oBAClBJ,EAAaI,KAAK,qBAGlB9L,KAAKiH,SACL0E,EAAQG,KAAK,gCACT9L,KAAK+G,gBAAkBZ,EAAoB4F,QAC3CJ,EAAQG,KAAK,2CAEb9L,KAAK+G,gBAAkBZ,EAAoB6F,iBAE3CL,EAAQG,KAAK,kDAEbH,EAAQG,KAAK,wCACbJ,EAAaI,KAAK,gBAEd9L,KAAK+G,gBAAkBZ,EAAoB8F,cAC3CjM,KAAK+G,gBACDZ,EAAoBa,qBAExB2E,EAAQG,KAAK,wCAKzB9L,KAAK2I,mBAAqB,IAAI,cAC1B,iBACA,cACA8C,EACAC,EACA,EACA,KACA,0CACAhI,GACA,EACA,KACA,2CACAW,OACAA,GACA,GAEJrE,KAAK2I,mBAAmBuD,aAAe,SACnCP,EAAoC,KACpCrG,EAAuC,KACvC6G,EAAuC,KACvCC,EACAC,EACAC,EACAC,EACAC,GAECxM,KAAayM,oBAAsBd,EACnC3L,KAAa0M,aAAajI,OACvBzE,KACFI,QAAQuM,aACN,CACIC,OAAQL,QAAAA,EAAcvM,KAAa6M,WACnCC,SAAUN,QAAAA,EAAgBxM,KAAa+M,cAE3C,CAAC,YACDzH,GAAatF,KAAagN,YAC1Bb,GAAanM,KAAaiN,UACd,OAAZtB,EAAmBA,EAAU,QAC7BtH,EACAgI,EACAC,EACAF,GAAoBpM,KAAakN,iBACjCxJ,EAAOyJ,SACD,sBACA,sBAEd,EACAnN,KAAK2I,mBAAmBuD,aAAaP,EAAQyB,KAAK,OAElDpN,KAAK2I,mBAAmBpJ,QAAUS,KAAKgB,SACvChB,KAAK2I,mBAAmBpE,kBAAkBC,KAAKC,I,kDAqI3C,GApIAzE,KAAKqI,qBAAqBgF,SACtBrN,KAAKE,OAAOoN,uBAEhBtN,KAAKqI,qBAAqBkF,SAE1B9I,EAAO+I,UAAU,eAAgBxN,KAAKuG,cAClC7C,EAAOyJ,UACP1I,EAAOgJ,kBACH,wBACAzN,KAAK2I,mBAAoB/D,aAAa3C,SAIzCjC,KAAKwI,mBAAoBhJ,YAa1BiF,EAAOC,WACH,eACA1E,KAAKwI,mBAAoBtG,aAEzBwB,EAAOyJ,UACP1I,EAAOgJ,kBACH,sBAC0D,QAA1D,EAAoC,QAApC,EAAAzN,KAAKwI,mBAAoBtG,mBAAW,eAAEwL,4BAAoB,QACtD,QApBZjJ,EAAOC,WACH,eACA1E,KAAKwI,mBAAoBvG,SAEzByB,EAAOyJ,UACP1I,EAAOgJ,kBACH,sBACsD,QAAtD,EAAgC,QAAhC,EAAAzN,KAAKwI,mBAAoBvG,eAAO,eAAEyL,4BAAoB,QAClD,OAgBZ1N,KAAKyI,qBACAzI,KAAKyI,qBAAqBjJ,YAa3BiF,EAAOC,WACH,iBACA1E,KAAKyI,qBAAqBvG,aAE1BwB,EAAOyJ,UACP1I,EAAOgJ,kBACH,wBAC2D,QAA3D,EAAqC,QAArC,EAAAzN,KAAKyI,qBAAqBvG,mBAAW,eAAEwL,4BAAoB,QACvD,QApBZjJ,EAAOC,WACH,iBACA1E,KAAKyI,qBAAqBxG,SAE1ByB,EAAOyJ,UACP1I,EAAOgJ,kBACH,wBACuD,QAAvD,EAAiC,QAAjC,EAAAzN,KAAKyI,qBAAqBxG,eAAO,eAAEyL,4BAAoB,QACnD,OAiBhBjJ,EAAO+I,UAAU,eAAgBxN,KAAKsG,YAEtCtG,KAAK4H,oBACLnD,EAAOc,SAAS,YAAavF,KAAK4G,kBAClCnC,EAAOE,aAAa,iBAAkB3E,KAAKoI,iBACvC1E,EAAOyJ,UACP1I,EAAOgJ,kBACH,wBACoB,QAApB,EAAAzN,KAAKoI,uBAAe,QAAI,QAI3BpI,KAAK0I,uBAAwBlJ,YAa9BiF,EAAOC,WACH,mBACA1E,KAAK0I,uBAAwBxG,aAE7BwB,EAAOyJ,UACP1I,EAAOgJ,kBACH,0BAC8D,QAA9D,EAAwC,QAAxC,EAAAzN,KAAK0I,uBAAwBxG,mBAAW,eAAEwL,4BAAoB,QAC1D,QApBZjJ,EAAOC,WACH,mBACA1E,KAAK0I,uBAAwBzG,SAE7ByB,EAAOyJ,UACP1I,EAAOgJ,kBACH,0BAC0D,QAA1D,EAAoC,QAApC,EAAAzN,KAAK0I,uBAAwBzG,eAAO,eAAEyL,4BAAoB,QACtD,OAgBhBjJ,EAAOc,SAAS,mBAAoBvF,KAAK4G,mBAG7CnC,EAAOC,WACH,oBACA1E,KAAKE,OAAOyN,oBAEZjK,EAAOyJ,UACP1I,EAAOgJ,kBACH,2BACoD,QAApD,EAA8B,QAA9B,EAAAzN,KAAKE,OAAOyN,0BAAkB,eAAED,4BAAoB,QAAI,MAIhEjJ,EAAOmJ,UAAU,aAAc5N,KAAKE,OAAO2N,iBAC3CpJ,EAAOmJ,UAAU,sBAAuB5N,KAAKqI,sBAC7C5D,EAAOmJ,UACH,mBACA5N,KAAKE,OAAOoN,uBAEhB7I,EAAOqJ,WAAW,YAAalC,GAC/BnH,EAAOc,SAAS,UAAWvF,KAAKwG,SAChC/B,EAAOc,SAAS,qBAAsBvF,KAAKyG,oBAC3ChC,EAAOc,SAAS,eAAgBvF,KAAK0G,cACrCjC,EAAOc,SAAS,gBAAiBvF,KAAK2G,eAEtClC,EAAOsJ,WAAW,WAAY/N,KAAK6G,UAEnCpC,EAAOc,SAAS,YAAavF,KAAKG,QAAS6N,MAEvChO,KAAKiH,OAAQ,CACb,IAAIhF,EAAiD,KACrD,OAAQjC,KAAK+G,eACT,KAAKZ,EAAoB8F,aACrBhK,EAAUjC,KAAKwI,mBAAoBvG,QACnC,MACJ,KAAKkE,EAAoBa,oBACrB/E,EAAUjC,KAAKwI,mBAAoBhJ,WAC7BQ,KAAKwI,mBAAoBtG,YACzBlC,KAAKwI,mBAAoBvG,QAC/B,MACJ,KAAKkE,EAAoB8H,iBACrBhM,EAA8C,QAApC,EAA2B,QAA3B,EAAAjC,KAAK0I,8BAAsB,eAAEzG,eAAO,QAAI,KAClD,MACJ,KAAKkE,EAAoB+H,wBACrBjM,GAAqC,QAA3B,EAAAjC,KAAK0I,8BAAsB,eAAElJ,YACO,QAAxC,EAA2B,QAA3B,EAAAQ,KAAK0I,8BAAsB,eAAExG,mBAAW,QAAI,KACR,QAApC,EAA2B,QAA3B,EAAAlC,KAAK0I,8BAAsB,eAAEzG,eAAO,QAAI,KAC9C,MACJ,KAAKkE,EAAoBgI,eACjBnO,KAAKyI,uBACLxG,EAAUjC,KAAKyI,qBAAqBxG,SAI5CjC,KAAK+G,gBAAkBZ,EAAoB4F,UAC3CtH,EAAOC,WAAW,eAAgBzC,GAC9ByB,EAAOyJ,UACP1I,EAAOgJ,kBACH,sBAC6B,QAA7B,EAAAxL,aAAO,EAAPA,EAASyL,4BAAoB,QAAI,M,IAMzD,CAEOU,e,WACwB,QAAvB,EAAApO,KAAKwI,0BAAkB,eAAEzG,gBACzB/B,KAAKI,QAAQiO,gBAAgBrO,KAAKwI,mBAAmBzG,cACrD/B,KAAKI,QAAQkO,MAAMtO,KAAKsI,kBAAkB,GAAM,GAAM,GACtDtI,KAAKI,QAAQyC,kBACT7C,KAAKwI,mBAAmBzG,gBAIH,QAAzB,EAAA/B,KAAKyI,4BAAoB,eAAE1G,gBAC3B/B,KAAKI,QAAQiO,gBACTrO,KAAKyI,qBAAqB1G,cAE9B/B,KAAKI,QAAQkO,MAAMtO,KAAKuI,sBAAsB,GAAM,GAAM,GAC1DvI,KAAKI,QAAQyC,kBACT7C,KAAKyI,qBAAqB1G,gBAIH,QAA3B,EAAA/B,KAAK0I,8BAAsB,eAAE3G,gBAC7B/B,KAAKI,QAAQiO,gBACTrO,KAAK0I,uBAAuB3G,cAGhC/B,KAAKI,QAAQkO,MAAMtO,KAAKuI,sBAAsB,GAAM,GAAO,GAC3DvI,KAAKI,QAAQyC,kBACT7C,KAAK0I,uBAAuB3G,cAGxC,CAEOwM,OAAOC,G,gBACV,GAAIxO,KAAKmI,sBAAwBqG,EAAYC,UACzC,OAGJ,MAAMC,EAAsB1O,KAAKI,QAAQuO,qBAEzC3O,KAAKI,QAAQwO,UAAS,OAAOvK,OAAWA,OAAWA,GAAW,GAC9DrE,KAAKI,QAAQyO,gBAAe,GAC5B7O,KAAKI,QAAQ0O,eAAc,GAC3B9O,KAAKI,QAAQ2O,aAAa,4BAGC,QAAvB,EAAA/O,KAAKwI,0BAAkB,eAAEzG,gBACzB/B,KAAKI,QAAQiO,gBAAgBrO,KAAKwI,mBAAmBzG,cAErDyM,EAAYQ,qBAEZhP,KAAKI,QAAQ6O,2BACbjP,KAAKI,QAAQyC,kBACT7C,KAAKwI,mBAAmBzG,gBAKH,QAAzB,EAAA/B,KAAKyI,4BAAoB,eAAE1G,gBAC3B/B,KAAKI,QAAQiO,gBACTrO,KAAKyI,qBAAqB1G,cAG9ByM,EAAYU,uBAEZlP,KAAKI,QAAQ6O,2BACbjP,KAAKI,QAAQyC,kBACT7C,KAAKyI,qBAAqB1G,gBAKH,QAA3B,EAAA/B,KAAK0I,8BAAsB,eAAE3G,gBAC7B/B,KAAKI,QAAQiO,gBACTrO,KAAK0I,uBAAuB3G,cAGhCyM,EAAYW,yBAEZnP,KAAKI,QAAQ6O,2BACbjP,KAAKI,QAAQyC,kBACT7C,KAAK0I,uBAAuB3G,eAKb,QAAvB,EAAA/B,KAAKwI,0BAAkB,SAAE9F,yBACA,QAAzB,EAAA1C,KAAKyI,4BAAoB,SAAE/F,yBACA,QAA3B,EAAA1C,KAAK0I,8BAAsB,SAAEhG,yBAEzBgM,GACA1O,KAAKI,QAAQiO,gBAAgBK,EAErC,CAEOtM,QAAQgN,GAAoB,G,YAC1BA,IACsB,QAAvB,EAAApP,KAAKwI,0BAAkB,SAAEpG,UACzBpC,KAAKwI,mBAAqB,KAED,QAAzB,EAAAxI,KAAKyI,4BAAoB,SAAErG,UAC3BpC,KAAKyI,qBAAuB,KAED,QAA3B,EAAAzI,KAAK0I,8BAAsB,SAAEtG,UAC7BpC,KAAK0I,uBAAyB,MAG9B1I,KAAK2I,oBAAsB3I,KAAKG,SAChCH,KAAKG,QAAQkP,kBAAkBrP,KAAK2I,oBAEjB,QAAvB,EAAA3I,KAAK2I,0BAAkB,SAAEvG,UACzBpC,KAAK2I,mBAAqB,KAE1B3I,KAAKmI,qBAAsB,CAC/B,E","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRenderingRenderTarget.ts","webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRenderingTargetRenderer.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\n\nexport class FluidRenderingRenderTarget {\n    protected _name: string;\n    protected _scene: BABYLON.Scene;\n    protected _camera: BABYLON.Nullable<BABYLON.Camera>;\n    protected _engine: BABYLON.Engine;\n    protected _width: number;\n    protected _height: number;\n    protected _blurTextureSizeX: number;\n    protected _blurTextureSizeY: number;\n    protected _textureType: number;\n    protected _textureFormat: number;\n    protected _blurTextureType: number;\n    protected _blurTextureFormat: number;\n    protected _useStandardBlur: boolean;\n    protected _generateDepthBuffer: boolean;\n    protected _samples: number;\n    protected _postProcessRunningIndex: number;\n\n    protected _rt: BABYLON.Nullable<BABYLON.RenderTargetWrapper>;\n    protected _texture: BABYLON.Nullable<BABYLON.Texture>;\n    protected _rtBlur: BABYLON.Nullable<BABYLON.RenderTargetWrapper>;\n    protected _textureBlurred: BABYLON.Nullable<BABYLON.Texture>;\n    protected _blurPostProcesses: BABYLON.Nullable<BABYLON.PostProcess[]>;\n\n    public enableBlur = true;\n\n    public blurSizeDivisor = 1;\n\n    public blurFilterSize = 7;\n\n    private _blurNumIterations = 3;\n\n    public get blurNumIterations() {\n        return this._blurNumIterations;\n    }\n\n    public set blurNumIterations(numIterations: number) {\n        if (this._blurNumIterations === numIterations) {\n            return;\n        }\n\n        this._blurNumIterations = numIterations;\n        if (this._blurPostProcesses !== null) {\n            const blurX = this._blurPostProcesses[0];\n            const blurY = this._blurPostProcesses[1];\n\n            this._blurPostProcesses = [\n                ...Array(this._blurNumIterations * 2).keys(),\n            ].map((elm) => (elm & 1 ? blurY : blurX));\n        }\n    }\n\n    public blurMaxFilterSize = 100;\n\n    public blurDepthScale = 10;\n\n    public particleSize = 0.02;\n\n    public onDisposeObservable: BABYLON.Observable<FluidRenderingRenderTarget> =\n        new BABYLON.Observable<FluidRenderingRenderTarget>();\n\n    public get renderTarget() {\n        return this._rt;\n    }\n\n    public get renderTargetBlur() {\n        return this._rtBlur;\n    }\n\n    public get texture() {\n        return this._texture;\n    }\n\n    public get textureBlur() {\n        return this._textureBlurred;\n    }\n\n    constructor(\n        name: string,\n        scene: BABYLON.Scene,\n        width: number,\n        height: number,\n        blurTextureSizeX: number,\n        blurTextureSizeY: number,\n        textureType: number = BABYLON.Constants.TEXTURETYPE_FLOAT,\n        textureFormat: number = BABYLON.Constants.TEXTUREFORMAT_R,\n        blurTextureType: number = BABYLON.Constants.TEXTURETYPE_FLOAT,\n        blurTextureFormat: number = BABYLON.Constants.TEXTUREFORMAT_R,\n        useStandardBlur = false,\n        camera: BABYLON.Nullable<BABYLON.Camera> = null,\n        generateDepthBuffer = true,\n        samples = 1\n    ) {\n        this._name = name;\n        this._scene = scene;\n        this._camera = camera;\n        this._engine = scene.getEngine();\n        this._width = width;\n        this._height = height;\n        this._blurTextureSizeX = blurTextureSizeX;\n        this._blurTextureSizeY = blurTextureSizeY;\n        this._textureType = textureType;\n        this._textureFormat = textureFormat;\n        this._blurTextureType = blurTextureType;\n        this._blurTextureFormat = blurTextureFormat;\n        this._useStandardBlur = useStandardBlur;\n        this._generateDepthBuffer = generateDepthBuffer;\n        this._samples = samples;\n        this._postProcessRunningIndex = 0;\n        this.enableBlur = blurTextureSizeX !== 0 && blurTextureSizeY !== 0;\n\n        this._rt = null;\n        this._texture = null;\n        this._rtBlur = null;\n        this._textureBlurred = null;\n        this._blurPostProcesses = null;\n    }\n\n    public initialize(): void {\n        this.dispose();\n\n        this._createRenderTarget();\n\n        if (this.enableBlur && this._texture) {\n            const [rtBlur, textureBlurred, blurPostProcesses] =\n                this._createBlurPostProcesses(\n                    this._texture,\n                    this._blurTextureType,\n                    this._blurTextureFormat,\n                    this.blurSizeDivisor,\n                    this._name,\n                    this._useStandardBlur\n                );\n            this._rtBlur = rtBlur;\n            this._textureBlurred = textureBlurred;\n            this._blurPostProcesses = blurPostProcesses;\n        }\n    }\n\n    public applyBlurPostProcesses(): void {\n        if (this.enableBlur && this._blurPostProcesses) {\n            this._postProcessRunningIndex = 0;\n            this._scene.postProcessManager.directRender(\n                this._blurPostProcesses,\n                this._rtBlur,\n                true\n            );\n            this._engine.unBindFramebuffer(this._rtBlur!);\n        }\n    }\n\n    protected _createRenderTarget(): void {\n        this._rt = this._engine.createRenderTargetTexture(\n            { width: this._width, height: this._height },\n            {\n                generateMipMaps: false,\n                type: this._textureType,\n                format: this._textureFormat,\n                samplingMode: BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                generateDepthBuffer: this._generateDepthBuffer,\n                generateStencilBuffer: false,\n                samples: this._samples,\n            }\n        );\n\n        const renderTexture = this._rt.texture!;\n\n        this._texture = new BABYLON.Texture(null, this._scene);\n        this._texture.name = \"rtt\" + this._name;\n        this._texture._texture = renderTexture;\n        this._texture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n        this._texture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n        this._texture.anisotropicFilteringLevel = 1;\n    }\n\n    protected _createBlurPostProcesses(\n        textureBlurSource: BABYLON.ThinTexture,\n        textureType: number,\n        textureFormat: number,\n        blurSizeDivisor: number,\n        debugName: string,\n        useStandardBlur = false\n    ): [BABYLON.RenderTargetWrapper, BABYLON.Texture, BABYLON.PostProcess[]] {\n        const engine = this._scene.getEngine();\n        const targetSize = new BABYLON.Vector2(\n            Math.floor(this._blurTextureSizeX / blurSizeDivisor),\n            Math.floor(this._blurTextureSizeY / blurSizeDivisor)\n        );\n        const useBilinearFiltering =\n            (textureType === BABYLON.Constants.TEXTURETYPE_FLOAT &&\n                engine.getCaps().textureFloatLinearFiltering) ||\n            (textureType === BABYLON.Constants.TEXTURETYPE_HALF_FLOAT &&\n                engine.getCaps().textureHalfFloatLinearFiltering);\n\n        const rtBlur = this._engine.createRenderTargetTexture(\n            { width: targetSize.x, height: targetSize.y },\n            {\n                generateMipMaps: false,\n                type: textureType,\n                format: textureFormat,\n                samplingMode: useBilinearFiltering\n                    ? BABYLON.Constants.TEXTURE_BILINEAR_SAMPLINGMODE\n                    : BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                generateDepthBuffer: false,\n                generateStencilBuffer: false,\n                samples: this._samples,\n            }\n        );\n\n        const renderTexture = rtBlur.texture!;\n\n        const texture = new BABYLON.Texture(null, this._scene);\n        texture.name = \"rttBlurred\" + debugName;\n        texture._texture = renderTexture;\n        texture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n        texture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n        texture.anisotropicFilteringLevel = 1;\n\n        if (useStandardBlur) {\n            const kernelBlurXPostprocess = new BABYLON.PostProcess(\n                \"BilateralBlurX\",\n                \"standardBlur\",\n                [\"filterSize\", \"blurDir\"],\n                null,\n                1,\n                null,\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                engine,\n                true,\n                null,\n                textureType,\n                undefined,\n                undefined,\n                undefined,\n                textureFormat\n            );\n            kernelBlurXPostprocess.samples = this._samples;\n            kernelBlurXPostprocess.externalTextureSamplerBinding = true;\n            kernelBlurXPostprocess.onApplyObservable.add((effect) => {\n                if (this._postProcessRunningIndex === 0) {\n                    effect.setTexture(\"textureSampler\", textureBlurSource);\n                } else {\n                    effect._bindTexture(\n                        \"textureSampler\",\n                        kernelBlurXPostprocess.inputTexture.texture\n                    );\n                }\n                effect.setInt(\"filterSize\", this.blurFilterSize);\n                effect.setFloat2(\"blurDir\", 1 / this._blurTextureSizeX, 0);\n                this._postProcessRunningIndex++;\n            });\n            kernelBlurXPostprocess.onSizeChangedObservable.add(() => {\n                kernelBlurXPostprocess._textures.forEach((rt) => {\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                });\n            });\n            this._fixReusablePostProcess(kernelBlurXPostprocess);\n\n            const kernelBlurYPostprocess = new BABYLON.PostProcess(\n                \"BilateralBlurY\",\n                \"standardBlur\",\n                [\"filterSize\", \"blurDir\"],\n                null,\n                1,\n                null,\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                engine,\n                true,\n                null,\n                textureType,\n                undefined,\n                undefined,\n                undefined,\n                textureFormat\n            );\n            kernelBlurYPostprocess.samples = this._samples;\n            kernelBlurYPostprocess.onApplyObservable.add((effect) => {\n                effect.setInt(\"filterSize\", this.blurFilterSize);\n                effect.setFloat2(\"blurDir\", 0, 1 / this._blurTextureSizeY);\n                this._postProcessRunningIndex++;\n            });\n            kernelBlurYPostprocess.onSizeChangedObservable.add(() => {\n                kernelBlurYPostprocess._textures.forEach((rt) => {\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                });\n            });\n            this._fixReusablePostProcess(kernelBlurYPostprocess);\n\n            kernelBlurXPostprocess.autoClear = false;\n            kernelBlurYPostprocess.autoClear = false;\n\n            return [\n                rtBlur,\n                texture,\n                [...Array(this._blurNumIterations * 2).keys()].map((elm) =>\n                    elm & 1 ? kernelBlurYPostprocess : kernelBlurXPostprocess\n                ),\n            ];\n        } else {\n            const uniforms: string[] = [\n                \"maxFilterSize\",\n                \"blurDir\",\n                \"projectedParticleConstant\",\n                \"depthThreshold\",\n            ];\n\n            const kernelBlurXPostprocess = new BABYLON.PostProcess(\n                \"BilateralBlurX\",\n                \"bilateralBlur\",\n                uniforms,\n                null,\n                1,\n                null,\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                engine,\n                true,\n                null,\n                textureType,\n                undefined,\n                undefined,\n                undefined,\n                textureFormat\n            );\n            kernelBlurXPostprocess.samples = this._samples;\n            kernelBlurXPostprocess.externalTextureSamplerBinding = true;\n            kernelBlurXPostprocess.onApplyObservable.add((effect) => {\n                if (this._postProcessRunningIndex === 0) {\n                    effect.setTexture(\"textureSampler\", textureBlurSource);\n                } else {\n                    effect._bindTexture(\n                        \"textureSampler\",\n                        kernelBlurXPostprocess.inputTexture.texture\n                    );\n                }\n                effect.setInt(\"maxFilterSize\", this.blurMaxFilterSize);\n                effect.setFloat2(\"blurDir\", 1 / this._blurTextureSizeX, 0);\n                effect.setFloat(\n                    \"projectedParticleConstant\",\n                    this._getProjectedParticleConstant()\n                );\n                effect.setFloat(\"depthThreshold\", this._getDepthThreshold());\n                this._postProcessRunningIndex++;\n            });\n            kernelBlurXPostprocess.onSizeChangedObservable.add(() => {\n                kernelBlurXPostprocess._textures.forEach((rt) => {\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                });\n            });\n            this._fixReusablePostProcess(kernelBlurXPostprocess);\n\n            const kernelBlurYPostprocess = new BABYLON.PostProcess(\n                \"BilateralBlurY\",\n                \"bilateralBlur\",\n                uniforms,\n                null,\n                1,\n                null,\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                engine,\n                true,\n                null,\n                textureType,\n                undefined,\n                undefined,\n                undefined,\n                textureFormat\n            );\n            kernelBlurYPostprocess.samples = this._samples;\n            kernelBlurYPostprocess.onApplyObservable.add((effect) => {\n                effect.setInt(\"maxFilterSize\", this.blurMaxFilterSize);\n                effect.setFloat2(\"blurDir\", 0, 1 / this._blurTextureSizeY);\n                effect.setFloat(\n                    \"projectedParticleConstant\",\n                    this._getProjectedParticleConstant()\n                );\n                effect.setFloat(\"depthThreshold\", this._getDepthThreshold());\n                this._postProcessRunningIndex++;\n            });\n            kernelBlurYPostprocess.onSizeChangedObservable.add(() => {\n                kernelBlurYPostprocess._textures.forEach((rt) => {\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                });\n            });\n            this._fixReusablePostProcess(kernelBlurYPostprocess);\n\n            kernelBlurXPostprocess.autoClear = false;\n            kernelBlurYPostprocess.autoClear = false;\n\n            return [\n                rtBlur,\n                texture,\n                [...Array(this._blurNumIterations * 2).keys()].map((elm) =>\n                    elm & 1 ? kernelBlurYPostprocess : kernelBlurXPostprocess\n                ),\n            ];\n        }\n    }\n\n    private _fixReusablePostProcess(pp: BABYLON.PostProcess) {\n        if (!pp.isReusable()) {\n            return;\n        }\n\n        pp.onActivateObservable.add(() => {\n            // undo what calling activate() does which will make sure we will retrieve the right texture when getting the input for the post process\n            pp._currentRenderTextureInd = (pp._currentRenderTextureInd + 1) % 2;\n        });\n        pp.onApplyObservable.add(() => {\n            // now we can advance to the next texture\n            pp._currentRenderTextureInd = (pp._currentRenderTextureInd + 1) % 2;\n        });\n    }\n\n    private _getProjectedParticleConstant() {\n        return (\n            (this.blurFilterSize *\n                this.particleSize *\n                0.05 *\n                (this._height / 2)) /\n            Math.tan((this._camera?.fov ?? (45 * Math.PI) / 180) / 2)\n        );\n    }\n\n    private _getDepthThreshold() {\n        return (this.particleSize / 2) * this.blurDepthScale;\n    }\n\n    public dispose(): void {\n        if (this.onDisposeObservable.hasObservers()) {\n            this.onDisposeObservable.notifyObservers(this);\n        }\n\n        this._rt?.dispose();\n        this._rt = null;\n        this._rtBlur?.dispose();\n        this._rtBlur = null;\n        if (this._blurPostProcesses) {\n            this._blurPostProcesses[0].dispose();\n            this._blurPostProcesses[1].dispose();\n        }\n        this._blurPostProcesses = null;\n    }\n}\n","import * as BABYLON from \"@babylonjs/core\";\n\nimport { FluidRenderingObject } from \"./fluidRenderingObject\";\nimport { FluidRenderingRenderTarget } from \"./fluidRenderingRenderTarget\";\n\nexport enum FluidRenderingDebug {\n    DepthTexture,\n    DepthBlurredTexture,\n    ThicknessTexture,\n    ThicknessBlurredTexture,\n    DiffuseTexture,\n    Normals,\n    DiffuseRendering,\n}\n\nexport class FluidRenderingTargetRenderer {\n    protected _scene: BABYLON.Scene;\n    protected _camera: BABYLON.Nullable<BABYLON.Camera>;\n    protected _engine: BABYLON.Engine;\n\n    protected _depthRenderTarget: BABYLON.Nullable<FluidRenderingRenderTarget>;\n    protected _diffuseRenderTarget: BABYLON.Nullable<FluidRenderingRenderTarget>;\n    protected _thicknessRenderTarget: BABYLON.Nullable<FluidRenderingRenderTarget>;\n\n    protected _renderPostProcess: BABYLON.Nullable<BABYLON.PostProcess>;\n\n    protected _invProjectionMatrix: BABYLON.Matrix;\n    protected _depthClearColor: BABYLON.Color4;\n    protected _thicknessClearColor: BABYLON.Color4;\n\n    protected _needInitialization: boolean;\n\n    public get needInitialization() {\n        return this._needInitialization;\n    }\n\n    private _generateDiffuseTexture = false;\n\n    public get generateDiffuseTexture() {\n        return this._generateDiffuseTexture;\n    }\n\n    public set generateDiffuseTexture(generate: boolean) {\n        if (this._generateDiffuseTexture === generate) {\n            return;\n        }\n\n        this._generateDiffuseTexture = generate;\n        this._needInitialization = true;\n    }\n\n    public fluidColor = new BABYLON.Color3(0.085, 0.6375, 0.765);\n    public surfaceColor = new BABYLON.Color3(0.0,0.3,0.8);\n\n    public density = 2;\n\n    public refractionStrength = 0.0;\n\n    public fresnelClamp = 0.15;\n\n    public specularPower = 2000;\n\n    public minimumThickness = 0;\n\n    public dirLight: BABYLON.Vector3 = new BABYLON.Vector3(\n        -2,\n        -1,\n        1\n    ).normalize();\n\n    private _debugFeature: FluidRenderingDebug =\n        FluidRenderingDebug.DepthBlurredTexture;\n\n    public get debugFeature() {\n        return this._debugFeature;\n    }\n\n    public set debugFeature(feature: FluidRenderingDebug) {\n        if (this._debugFeature === feature) {\n            return;\n        }\n\n        this._needInitialization = true;\n        this._debugFeature = feature;\n    }\n\n    private _debug = false;\n\n    public get debug() {\n        return this._debug;\n    }\n\n    public set debug(debug: boolean) {\n        if (this._debug === debug) {\n            return;\n        }\n\n        this._debug = debug;\n        this._needInitialization = true;\n    }\n\n    private _enableBlurDepth = true;\n\n    public get enableBlurDepth() {\n        return this._enableBlurDepth;\n    }\n\n    public set enableBlurDepth(enable: boolean) {\n        if (this._enableBlurDepth === enable) {\n            return;\n        }\n\n        this._enableBlurDepth = enable;\n        this._needInitialization = true;\n    }\n\n    private _blurDepthSizeDivisor = 1;\n\n    public get blurDepthSizeDivisor() {\n        return this._blurDepthSizeDivisor;\n    }\n\n    public set blurDepthSizeDivisor(scale: number) {\n        if (this._blurDepthSizeDivisor === scale) {\n            return;\n        }\n\n        this._blurDepthSizeDivisor = scale;\n        this._needInitialization = true;\n    }\n\n    private _blurDepthFilterSize = 7;\n\n    public get blurDepthFilterSize() {\n        return this._blurDepthFilterSize;\n    }\n\n    public set blurDepthFilterSize(filterSize: number) {\n        if (this._blurDepthFilterSize === filterSize) {\n            return;\n        }\n\n        this._blurDepthFilterSize = filterSize;\n        this._setBlurParameters();\n    }\n\n    private _blurDepthNumIterations = 3;\n\n    public get blurDepthNumIterations() {\n        return this._blurDepthNumIterations;\n    }\n\n    public set blurDepthNumIterations(numIterations: number) {\n        if (this._blurDepthNumIterations === numIterations) {\n            return;\n        }\n\n        this._blurDepthNumIterations = numIterations;\n        this._setBlurParameters();\n    }\n\n    private _blurDepthMaxFilterSize = 100;\n\n    public get blurDepthMaxFilterSize() {\n        return this._blurDepthMaxFilterSize;\n    }\n\n    public set blurDepthMaxFilterSize(maxFilterSize: number) {\n        if (this._blurDepthMaxFilterSize === maxFilterSize) {\n            return;\n        }\n\n        this._blurDepthMaxFilterSize = maxFilterSize;\n        this._setBlurParameters();\n    }\n\n    private _blurDepthDepthScale = 10;\n\n    public get blurDepthDepthScale() {\n        return this._blurDepthDepthScale;\n    }\n\n    public set blurDepthDepthScale(scale: number) {\n        if (this._blurDepthDepthScale === scale) {\n            return;\n        }\n\n        this._blurDepthDepthScale = scale;\n        this._setBlurParameters();\n    }\n\n    private _enableBlurThickness = true;\n\n    public get enableBlurThickness() {\n        return this._enableBlurThickness;\n    }\n\n    public set enableBlurThickness(enable: boolean) {\n        if (this._enableBlurThickness === enable) {\n            return;\n        }\n\n        this._enableBlurThickness = enable;\n        this._needInitialization = true;\n    }\n\n    private _blurThicknessSizeDivisor = 1;\n\n    public get blurThicknessSizeDivisor() {\n        return this._blurThicknessSizeDivisor;\n    }\n\n    public set blurThicknessSizeDivisor(scale: number) {\n        if (this._blurThicknessSizeDivisor === scale) {\n            return;\n        }\n\n        this._blurThicknessSizeDivisor = scale;\n        this._needInitialization = true;\n    }\n\n    private _blurThicknessFilterSize = 5;\n\n    public get blurThicknessFilterSize() {\n        return this._blurThicknessFilterSize;\n    }\n\n    public set blurThicknessFilterSize(filterSize: number) {\n        if (this._blurThicknessFilterSize === filterSize) {\n            return;\n        }\n\n        this._blurThicknessFilterSize = filterSize;\n        this._setBlurParameters();\n    }\n\n    private _blurThicknessNumIterations = 1;\n\n    public get blurThicknessNumIterations() {\n        return this._blurThicknessNumIterations;\n    }\n\n    public set blurThicknessNumIterations(numIterations: number) {\n        if (this._blurThicknessNumIterations === numIterations) {\n            return;\n        }\n\n        this._blurThicknessNumIterations = numIterations;\n        this._setBlurParameters();\n    }\n\n    private _useFixedThickness = false;\n\n    public get useFixedThickness() {\n        return this._useFixedThickness;\n    }\n\n    public set useFixedThickness(use: boolean) {\n        if (this._useFixedThickness === use) {\n            return;\n        }\n\n        this._useFixedThickness = use;\n        this._needInitialization = true;\n    }\n\n    /** @hidden */\n    public _bgDepthTexture: BABYLON.Nullable<BABYLON.InternalTexture>;\n\n    public onUseVelocityChanged =\n        new BABYLON.Observable<FluidRenderingTargetRenderer>();\n\n    private _useVelocity = false;\n\n    public get useVelocity() {\n        return this._useVelocity;\n    }\n\n    public set useVelocity(use: boolean) {\n        if (this._useVelocity === use) {\n            return;\n        }\n\n        this._useVelocity = use;\n        this._needInitialization = true;\n        this.onUseVelocityChanged.notifyObservers(this);\n    }\n\n    private _depthMapSize: BABYLON.Nullable<number> = null;\n\n    public get depthMapSize() {\n        return this._depthMapSize;\n    }\n\n    public set depthMapSize(size: BABYLON.Nullable<number>) {\n        if (this._depthMapSize === size) {\n            return;\n        }\n\n        this._depthMapSize = size;\n        this._needInitialization = true;\n    }\n\n    private _thicknessMapSize: BABYLON.Nullable<number> = null;\n\n    public get thicknessMapSize() {\n        return this._thicknessMapSize;\n    }\n\n    public set thicknessMapSize(size: BABYLON.Nullable<number>) {\n        if (this._thicknessMapSize === size) {\n            return;\n        }\n\n        this._thicknessMapSize = size;\n        this._needInitialization = true;\n    }\n\n    private _diffuseMapSize: BABYLON.Nullable<number> = null;\n\n    public get diffuseMapSize() {\n        return this._diffuseMapSize;\n    }\n\n    public set diffuseMapSize(size: BABYLON.Nullable<number>) {\n        if (this._diffuseMapSize === size) {\n            return;\n        }\n\n        this._diffuseMapSize = size;\n        this._needInitialization = true;\n    }\n\n    // Note: changing this value does not work because depth/stencil textures can't be created with MSAA yet (see https://github.com/BabylonJS/Babylon.js/issues/12444)\n    private _samples = 1;\n\n    public get samples() {\n        return this._samples;\n    }\n\n    public set samples(samples: number) {\n        if (this._samples === samples) {\n            return;\n        }\n\n        this._samples = samples;\n        this._needInitialization = true;\n    }\n\n    public get camera() {\n        return this._camera;\n    }\n\n    /** @hidden */\n    public get renderPostProcess() {\n        return this._renderPostProcess;\n    }\n\n    /** @hidden */\n    public get depthRenderTarget() {\n        return this._depthRenderTarget;\n    }\n\n    /** @hidden */\n    public get thicknessRenderTarget() {\n        return this._thicknessRenderTarget;\n    }\n\n    /** @hidden */\n    public get diffuseRenderTarget() {\n        return this._diffuseRenderTarget;\n    }\n\n    constructor(scene: BABYLON.Scene, camera?: BABYLON.Camera) {\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        this._camera = camera ?? scene.activeCamera;\n        this._needInitialization = true;\n        this._bgDepthTexture = null;\n\n        this._invProjectionMatrix = new BABYLON.Matrix();\n        this._depthClearColor = new BABYLON.Color4(1e6, 1e6, 1e6, 1);\n        this._thicknessClearColor = new BABYLON.Color4(0, 0, 0, 1);\n\n        this._depthRenderTarget = null;\n        this._diffuseRenderTarget = null;\n        this._thicknessRenderTarget = null;\n\n        this._renderPostProcess = null;\n    }\n\n    public initialize(): void {\n        this.dispose();\n\n        this._needInitialization = false;\n\n        const depthWidth = this._depthMapSize ?? this._engine.getRenderWidth();\n        const depthHeight =\n            this._depthMapSize !== null\n                ? Math.round(\n                      (this._depthMapSize * this._engine.getRenderHeight()) /\n                          this._engine.getRenderWidth()\n                  )\n                : this._engine.getRenderHeight();\n\n        this._depthRenderTarget = new FluidRenderingRenderTarget(\n            \"Depth\",\n            this._scene,\n            depthWidth,\n            depthHeight,\n            depthWidth,\n            depthHeight,\n            BABYLON.Constants.TEXTURETYPE_FLOAT,\n            BABYLON.Constants.TEXTUREFORMAT_RG,\n            BABYLON.Constants.TEXTURETYPE_FLOAT,\n            BABYLON.Constants.TEXTUREFORMAT_RG,\n            false,\n            this._camera,\n            true,\n            this._samples\n        );\n\n        this._initializeRenderTarget(this._depthRenderTarget);\n\n        if (this.generateDiffuseTexture) {\n            const diffuseWidth =\n                this._diffuseMapSize ?? this._engine.getRenderWidth();\n            const diffuseHeight =\n                this._diffuseMapSize !== null\n                    ? Math.round(\n                          (this._diffuseMapSize *\n                              this._engine.getRenderHeight()) /\n                              this._engine.getRenderWidth()\n                      )\n                    : this._engine.getRenderHeight();\n\n            this._diffuseRenderTarget = new FluidRenderingRenderTarget(\n                \"Diffuse\",\n                this._scene,\n                diffuseWidth,\n                diffuseHeight,\n                0,\n                0,\n                BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                BABYLON.Constants.TEXTUREFORMAT_RGBA,\n                BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                BABYLON.Constants.TEXTUREFORMAT_RGBA,\n                true,\n                this._camera,\n                true,\n                this._samples\n            );\n\n            this._initializeRenderTarget(this._diffuseRenderTarget);\n        }\n\n        const thicknessWidth =\n            this._thicknessMapSize ?? this._engine.getRenderWidth();\n        const thicknessHeight =\n            this._thicknessMapSize !== null\n                ? Math.round(\n                      (this._thicknessMapSize *\n                          this._engine.getRenderHeight()) /\n                          this._engine.getRenderWidth()\n                  )\n                : this._engine.getRenderHeight();\n\n        if (!this._useFixedThickness) {\n            this._thicknessRenderTarget = new FluidRenderingRenderTarget(\n                \"Thickness\",\n                this._scene,\n                thicknessWidth,\n                thicknessHeight,\n                thicknessWidth,\n                thicknessHeight,\n                BABYLON.Constants.TEXTURETYPE_HALF_FLOAT,\n                BABYLON.Constants.TEXTUREFORMAT_R,\n                BABYLON.Constants.TEXTURETYPE_HALF_FLOAT,\n                BABYLON.Constants.TEXTUREFORMAT_R,\n                true,\n                this._camera,\n                false,\n                this._samples\n            );\n\n            this._initializeRenderTarget(this._thicknessRenderTarget);\n        }\n\n        this._createLiquidRenderingPostProcess();\n    }\n\n    protected _setBlurParameters(\n        renderTarget: BABYLON.Nullable<FluidRenderingRenderTarget> = null\n    ): void {\n        if (renderTarget === null || renderTarget === this._depthRenderTarget) {\n            this._setBlurDepthParameters();\n        }\n        if (\n            renderTarget === null ||\n            renderTarget === this._thicknessRenderTarget\n        ) {\n            this._setBlurThicknessParameters();\n        }\n    }\n\n    protected _setBlurDepthParameters(): void {\n        if (!this._depthRenderTarget) {\n            return;\n        }\n        this._depthRenderTarget.blurFilterSize = this.blurDepthFilterSize;\n        this._depthRenderTarget.blurMaxFilterSize = this.blurDepthMaxFilterSize;\n        this._depthRenderTarget.blurNumIterations = this.blurDepthNumIterations;\n        this._depthRenderTarget.blurDepthScale = this.blurDepthDepthScale;\n    }\n\n    protected _setBlurThicknessParameters(): void {\n        if (!this._thicknessRenderTarget) {\n            return;\n        }\n        this._thicknessRenderTarget.blurFilterSize =\n            this.blurThicknessFilterSize;\n        this._thicknessRenderTarget.blurNumIterations =\n            this.blurThicknessNumIterations;\n    }\n\n    protected _initializeRenderTarget(\n        renderTarget: FluidRenderingRenderTarget\n    ): void {\n        if (renderTarget !== this._diffuseRenderTarget) {\n            renderTarget.enableBlur =\n                renderTarget === this._depthRenderTarget\n                    ? this.enableBlurDepth\n                    : this.enableBlurThickness;\n            renderTarget.blurSizeDivisor =\n                renderTarget === this._depthRenderTarget\n                    ? this.blurDepthSizeDivisor\n                    : this.blurThicknessSizeDivisor;\n        }\n\n        this._setBlurParameters(renderTarget);\n\n        renderTarget.initialize();\n    }\n\n    protected _createLiquidRenderingPostProcess(): void {\n        const engine = this._scene.getEngine();\n\n        const uniformNames = [\n            \"viewMatrix\",\n            \"projectionMatrix\",\n            \"invProjectionMatrix\",\n            \"texelSize\",\n            \"dirLight\",\n            \"cameraFar\",\n            \"density\",\n            \"refractionStrength\",\n            \"fresnelClamp\",\n            \"specularPower\",\n            \"surfaceColor\"\n        ];\n        const samplerNames = [\"depthSampler\", \"reflectionSampler\"];\n        const defines = [];\n\n        this.dispose(true);\n\n        if (!this._camera) {\n            return;\n        }\n\n        const texture = this._depthRenderTarget!.enableBlur\n            ? this._depthRenderTarget!.textureBlur!\n            : this._depthRenderTarget!.texture!;\n        const texelSize = new BABYLON.Vector2(\n            1 / texture.getSize().width,\n            1 / texture.getSize().height\n        );\n\n        if (this._diffuseRenderTarget) {\n            samplerNames.push(\"diffuseSampler\");\n            defines.push(\"#define FLUIDRENDERING_DIFFUSETEXTURE\");\n        } else {\n            uniformNames.push(\"diffuseColor\");\n        }\n\n        if (this._useVelocity) {\n            samplerNames.push(\"velocitySampler\");\n            defines.push(\"#define FLUIDRENDERING_VELOCITY\");\n        }\n\n        if (this._useFixedThickness) {\n            uniformNames.push(\"thickness\");\n            samplerNames.push(\"bgDepthSampler\");\n            defines.push(\"#define FLUIDRENDERING_FIXED_THICKNESS\");\n        } else {\n            uniformNames.push(\"minimumThickness\");\n            samplerNames.push(\"thicknessSampler\");\n        }\n\n        if (this._debug) {\n            defines.push(\"#define FLUIDRENDERING_DEBUG\");\n            if (this._debugFeature === FluidRenderingDebug.Normals) {\n                defines.push(\"#define FLUIDRENDERING_DEBUG_SHOWNORMAL\");\n            } else if (\n                this._debugFeature === FluidRenderingDebug.DiffuseRendering\n            ) {\n                defines.push(\"#define FLUIDRENDERING_DEBUG_DIFFUSERENDERING\");\n            } else {\n                defines.push(\"#define FLUIDRENDERING_DEBUG_TEXTURE\");\n                samplerNames.push(\"debugSampler\");\n                if (\n                    this._debugFeature === FluidRenderingDebug.DepthTexture ||\n                    this._debugFeature ===\n                        FluidRenderingDebug.DepthBlurredTexture\n                ) {\n                    defines.push(\"#define FLUIDRENDERING_DEBUG_DEPTH\");\n                }\n            }\n        }\n\n        this._renderPostProcess = new BABYLON.PostProcess(\n            \"FluidRendering\",\n            \"renderFluid\",\n            uniformNames,\n            samplerNames,\n            1,\n            null,\n            BABYLON.Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\n            engine,\n            false,\n            null,\n            BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            undefined,\n            undefined,\n            true\n        );\n        this._renderPostProcess.updateEffect = function (\n            defines: BABYLON.Nullable<string> = null,\n            uniforms: BABYLON.Nullable<string[]> = null,\n            samplers: BABYLON.Nullable<string[]> = null,\n            indexParameters?: any,\n            onCompiled?: (effect: BABYLON.Effect) => void,\n            onError?: (effect: BABYLON.Effect, errors: string) => void,\n            vertexUrl?: string,\n            fragmentUrl?: string\n        ) {\n            (this as any)._postProcessDefines = defines;\n            (this as any)._drawWrapper.effect = (\n                this as any\n            )._engine.createEffect(\n                {\n                    vertex: vertexUrl ?? (this as any)._vertexUrl,\n                    fragment: fragmentUrl ?? (this as any)._fragmentUrl,\n                },\n                [\"position\"],\n                uniforms || (this as any)._parameters,\n                samplers || (this as any)._samplers,\n                defines !== null ? defines : \"\",\n                undefined,\n                onCompiled,\n                onError,\n                indexParameters || (this as any)._indexParameters,\n                engine.isWebGPU\n                    ? BABYLON.ShaderLanguage.WGSL\n                    : BABYLON.ShaderLanguage.GLSL\n            );\n        };\n        this._renderPostProcess.updateEffect(defines.join(\"\\n\"));\n\n        this._renderPostProcess.samples = this._samples;\n        this._renderPostProcess.onApplyObservable.add((effect) => {\n            this._invProjectionMatrix.copyFrom(\n                this._scene.getProjectionMatrix()\n            );\n            this._invProjectionMatrix.invert();\n\n            effect.setColor3(\"surfaceColor\", this.surfaceColor);\n            if (engine.isWebGPU) {\n                effect.setTextureSampler(\n                    \"textureSamplerSampler\",\n                    this._renderPostProcess!.inputTexture.texture\n                );\n            }\n\n            if (!this._depthRenderTarget!.enableBlur) {\n                effect.setTexture(\n                    \"depthSampler\",\n                    this._depthRenderTarget!.texture\n                );\n                if (engine.isWebGPU) {\n                    effect.setTextureSampler(\n                        \"depthSamplerSampler\",\n                        this._depthRenderTarget!.texture?.getInternalTexture() ??\n                            null\n                    );\n                }\n            } else {\n                effect.setTexture(\n                    \"depthSampler\",\n                    this._depthRenderTarget!.textureBlur\n                );\n                if (engine.isWebGPU) {\n                    effect.setTextureSampler(\n                        \"depthSamplerSampler\",\n                        this._depthRenderTarget!.textureBlur?.getInternalTexture() ??\n                            null\n                    );\n                }\n            }\n            if (this._diffuseRenderTarget) {\n                if (!this._diffuseRenderTarget.enableBlur) {\n                    effect.setTexture(\n                        \"diffuseSampler\",\n                        this._diffuseRenderTarget.texture\n                    );\n                    if (engine.isWebGPU) {\n                        effect.setTextureSampler(\n                            \"diffuseSamplerSampler\",\n                            this._diffuseRenderTarget.texture?.getInternalTexture() ??\n                                null\n                        );\n                    }\n                } else {\n                    effect.setTexture(\n                        \"diffuseSampler\",\n                        this._diffuseRenderTarget.textureBlur\n                    );\n                    if (engine.isWebGPU) {\n                        effect.setTextureSampler(\n                            \"diffuseSamplerSampler\",\n                            this._diffuseRenderTarget.textureBlur?.getInternalTexture() ??\n                                null\n                        );\n                    }\n                }\n            } else {\n                effect.setColor3(\"diffuseColor\", this.fluidColor);\n            }\n            if (this._useFixedThickness) {\n                effect.setFloat(\"thickness\", this.minimumThickness);\n                effect._bindTexture(\"bgDepthSampler\", this._bgDepthTexture);\n                if (engine.isWebGPU) {\n                    effect.setTextureSampler(\n                        \"bgDepthSamplerSampler\",\n                        this._bgDepthTexture ?? null\n                    );\n                }\n            } else {\n                if (!this._thicknessRenderTarget!.enableBlur) {\n                    effect.setTexture(\n                        \"thicknessSampler\",\n                        this._thicknessRenderTarget!.texture\n                    );\n                    if (engine.isWebGPU) {\n                        effect.setTextureSampler(\n                            \"thicknessSamplerSampler\",\n                            this._thicknessRenderTarget!.texture?.getInternalTexture() ??\n                                null\n                        );\n                    }\n                } else {\n                    effect.setTexture(\n                        \"thicknessSampler\",\n                        this._thicknessRenderTarget!.textureBlur\n                    );\n                    if (engine.isWebGPU) {\n                        effect.setTextureSampler(\n                            \"thicknessSamplerSampler\",\n                            this._thicknessRenderTarget!.textureBlur?.getInternalTexture() ??\n                                null\n                        );\n                    }\n                }\n                effect.setFloat(\"minimumThickness\", this.minimumThickness);\n            }\n\n            effect.setTexture(\n                \"reflectionSampler\",\n                this._scene.environmentTexture\n            );\n            if (engine.isWebGPU) {\n                effect.setTextureSampler(\n                    \"reflectionSamplerSampler\",\n                    this._scene.environmentTexture?.getInternalTexture() ?? null\n                );\n            }\n\n            effect.setMatrix(\"viewMatrix\", this._scene.getViewMatrix());\n            effect.setMatrix(\"invProjectionMatrix\", this._invProjectionMatrix);\n            effect.setMatrix(\n                \"projectionMatrix\",\n                this._scene.getProjectionMatrix()\n            );\n            effect.setVector2(\"texelSize\", texelSize);\n            effect.setFloat(\"density\", this.density);\n            effect.setFloat(\"refractionStrength\", this.refractionStrength);\n            effect.setFloat(\"fresnelClamp\", this.fresnelClamp);\n            effect.setFloat(\"specularPower\", this.specularPower);\n\n            effect.setVector3(\"dirLight\", this.dirLight);\n\n            effect.setFloat(\"cameraFar\", this._camera!.maxZ);\n\n            if (this._debug) {\n                let texture: BABYLON.Nullable<BABYLON.ThinTexture> = null;\n                switch (this._debugFeature) {\n                    case FluidRenderingDebug.DepthTexture:\n                        texture = this._depthRenderTarget!.texture;\n                        break;\n                    case FluidRenderingDebug.DepthBlurredTexture:\n                        texture = this._depthRenderTarget!.enableBlur\n                            ? this._depthRenderTarget!.textureBlur\n                            : this._depthRenderTarget!.texture;\n                        break;\n                    case FluidRenderingDebug.ThicknessTexture:\n                        texture = this._thicknessRenderTarget?.texture ?? null;\n                        break;\n                    case FluidRenderingDebug.ThicknessBlurredTexture:\n                        texture = this._thicknessRenderTarget?.enableBlur\n                            ? this._thicknessRenderTarget?.textureBlur ?? null\n                            : this._thicknessRenderTarget?.texture ?? null;\n                        break;\n                    case FluidRenderingDebug.DiffuseTexture:\n                        if (this._diffuseRenderTarget) {\n                            texture = this._diffuseRenderTarget.texture;\n                        }\n                        break;\n                }\n                if (this._debugFeature !== FluidRenderingDebug.Normals) {\n                    effect.setTexture(\"debugSampler\", texture);\n                    if (engine.isWebGPU) {\n                        effect.setTextureSampler(\n                            \"debugSamplerSampler\",\n                            texture?.getInternalTexture() ?? null\n                        );\n                    }\n                }\n            }\n        });\n    }\n\n    public clearTargets(): void {\n        if (this._depthRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\n            this._engine.clear(this._depthClearColor, true, true, false);\n            this._engine.unBindFramebuffer(\n                this._depthRenderTarget.renderTarget\n            );\n        }\n\n        if (this._diffuseRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(\n                this._diffuseRenderTarget.renderTarget\n            );\n            this._engine.clear(this._thicknessClearColor, true, true, false);\n            this._engine.unBindFramebuffer(\n                this._diffuseRenderTarget.renderTarget\n            );\n        }\n\n        if (this._thicknessRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(\n                this._thicknessRenderTarget.renderTarget\n            );\n            // we don't clear the depth buffer because it is the depth buffer that is coming from the scene and that we reuse in the thickness rendering pass\n            this._engine.clear(this._thicknessClearColor, true, false, false);\n            this._engine.unBindFramebuffer(\n                this._thicknessRenderTarget.renderTarget\n            );\n        }\n    }\n\n    public render(fluidObject: FluidRenderingObject): void {\n        if (this._needInitialization || !fluidObject.isReady()) {\n            return;\n        }\n\n        const currentRenderTarget = this._engine._currentRenderTarget;\n\n        this._engine.setState(false, undefined, undefined, undefined, true);\n        this._engine.setDepthBuffer(true);\n        this._engine.setDepthWrite(true);\n        this._engine.setAlphaMode(BABYLON.Constants.ALPHA_DISABLE);\n\n        // Render the particles in the depth texture\n        if (this._depthRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\n\n            fluidObject.renderDepthTexture();\n\n            this._engine.unbindInstanceAttributes();\n            this._engine.unBindFramebuffer(\n                this._depthRenderTarget.renderTarget\n            );\n        }\n\n        // Render the particles in the diffuse texture\n        if (this._diffuseRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(\n                this._diffuseRenderTarget.renderTarget\n            );\n\n            fluidObject.renderDiffuseTexture();\n\n            this._engine.unbindInstanceAttributes();\n            this._engine.unBindFramebuffer(\n                this._diffuseRenderTarget.renderTarget\n            );\n        }\n\n        // Render the particles in the thickness texture\n        if (this._thicknessRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(\n                this._thicknessRenderTarget.renderTarget\n            );\n\n            fluidObject.renderThicknessTexture();\n\n            this._engine.unbindInstanceAttributes();\n            this._engine.unBindFramebuffer(\n                this._thicknessRenderTarget.renderTarget\n            );\n        }\n\n        // Run the blur post processes\n        this._depthRenderTarget?.applyBlurPostProcesses();\n        this._diffuseRenderTarget?.applyBlurPostProcesses();\n        this._thicknessRenderTarget?.applyBlurPostProcesses();\n\n        if (currentRenderTarget) {\n            this._engine.bindFramebuffer(currentRenderTarget);\n        }\n    }\n\n    public dispose(onlyPostProcesses = false): void {\n        if (!onlyPostProcesses) {\n            this._depthRenderTarget?.dispose();\n            this._depthRenderTarget = null;\n\n            this._diffuseRenderTarget?.dispose();\n            this._diffuseRenderTarget = null;\n\n            this._thicknessRenderTarget?.dispose();\n            this._thicknessRenderTarget = null;\n        }\n\n        if (this._renderPostProcess && this._camera) {\n            this._camera.detachPostProcess(this._renderPostProcess);\n        }\n        this._renderPostProcess?.dispose();\n        this._renderPostProcess = null;\n\n        this._needInitialization = false;\n    }\n}\n"],"names":["FluidRenderingRenderTarget","constructor","name","scene","width","height","blurTextureSizeX","blurTextureSizeY","textureType","textureFormat","blurTextureType","blurTextureFormat","useStandardBlur","camera","generateDepthBuffer","samples","enableBlur","blurSizeDivisor","blurFilterSize","_blurNumIterations","blurMaxFilterSize","blurDepthScale","particleSize","onDisposeObservable","this","_name","_scene","_camera","_engine","getEngine","_width","_height","_blurTextureSizeX","_blurTextureSizeY","_textureType","_textureFormat","_blurTextureType","_blurTextureFormat","_useStandardBlur","_generateDepthBuffer","_samples","_postProcessRunningIndex","_rt","_texture","_rtBlur","_textureBlurred","_blurPostProcesses","blurNumIterations","numIterations","blurX","blurY","Array","keys","map","elm","renderTarget","renderTargetBlur","texture","textureBlur","initialize","dispose","_createRenderTarget","rtBlur","textureBlurred","blurPostProcesses","_createBlurPostProcesses","applyBlurPostProcesses","postProcessManager","directRender","unBindFramebuffer","createRenderTargetTexture","generateMipMaps","type","format","samplingMode","generateStencilBuffer","renderTexture","wrapU","wrapV","anisotropicFilteringLevel","textureBlurSource","debugName","engine","targetSize","Math","floor","useBilinearFiltering","getCaps","textureFloatLinearFiltering","textureHalfFloatLinearFiltering","x","y","kernelBlurXPostprocess","undefined","externalTextureSamplerBinding","onApplyObservable","add","effect","setTexture","_bindTexture","inputTexture","setInt","setFloat2","onSizeChangedObservable","_textures","forEach","rt","_fixReusablePostProcess","kernelBlurYPostprocess","autoClear","uniforms","setFloat","_getProjectedParticleConstant","_getDepthThreshold","pp","isReusable","onActivateObservable","_currentRenderTextureInd","tan","fov","PI","hasObservers","notifyObservers","FluidRenderingDebug","FluidRenderingTargetRenderer","_generateDiffuseTexture","fluidColor","surfaceColor","density","refractionStrength","fresnelClamp","specularPower","minimumThickness","dirLight","normalize","_debugFeature","DepthBlurredTexture","_debug","_enableBlurDepth","_blurDepthSizeDivisor","_blurDepthFilterSize","_blurDepthNumIterations","_blurDepthMaxFilterSize","_blurDepthDepthScale","_enableBlurThickness","_blurThicknessSizeDivisor","_blurThicknessFilterSize","_blurThicknessNumIterations","_useFixedThickness","onUseVelocityChanged","_useVelocity","_depthMapSize","_thicknessMapSize","_diffuseMapSize","activeCamera","_needInitialization","_bgDepthTexture","_invProjectionMatrix","_depthClearColor","_thicknessClearColor","_depthRenderTarget","_diffuseRenderTarget","_thicknessRenderTarget","_renderPostProcess","needInitialization","generateDiffuseTexture","generate","debugFeature","feature","debug","enableBlurDepth","enable","blurDepthSizeDivisor","scale","blurDepthFilterSize","filterSize","_setBlurParameters","blurDepthNumIterations","blurDepthMaxFilterSize","maxFilterSize","blurDepthDepthScale","enableBlurThickness","blurThicknessSizeDivisor","blurThicknessFilterSize","blurThicknessNumIterations","useFixedThickness","use","useVelocity","depthMapSize","size","thicknessMapSize","diffuseMapSize","renderPostProcess","depthRenderTarget","thicknessRenderTarget","diffuseRenderTarget","depthWidth","getRenderWidth","depthHeight","round","getRenderHeight","_initializeRenderTarget","diffuseWidth","diffuseHeight","thicknessWidth","thicknessHeight","_createLiquidRenderingPostProcess","_setBlurDepthParameters","_setBlurThicknessParameters","uniformNames","samplerNames","defines","texelSize","getSize","push","Normals","DiffuseRendering","DepthTexture","updateEffect","samplers","indexParameters","onCompiled","onError","vertexUrl","fragmentUrl","_postProcessDefines","_drawWrapper","createEffect","vertex","_vertexUrl","fragment","_fragmentUrl","_parameters","_samplers","_indexParameters","isWebGPU","join","copyFrom","getProjectionMatrix","invert","setColor3","setTextureSampler","getInternalTexture","environmentTexture","setMatrix","getViewMatrix","setVector2","setVector3","maxZ","ThicknessTexture","ThicknessBlurredTexture","DiffuseTexture","clearTargets","bindFramebuffer","clear","render","fluidObject","isReady","currentRenderTarget","_currentRenderTarget","setState","setDepthBuffer","setDepthWrite","setAlphaMode","renderDepthTexture","unbindInstanceAttributes","renderDiffuseTexture","renderThicknessTexture","onlyPostProcesses","detachPostProcess"],"sourceRoot":""}