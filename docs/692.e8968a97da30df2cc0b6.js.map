{"version":3,"file":"692.e8968a97da30df2cc0b6.js","mappings":"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","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRendererGUI.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\n\nimport * as LiLGUI from \"lil-gui\";\nimport { FluidRenderingDebug } from \"./fluidRenderingTargetRenderer\";\n/*\nasync function LoadDAT(): Promise<void> {\n    const _ = await import(\"@babylonjs/core/Misc/tools\")\n    return _.Tools.LoadScriptAsync(\"https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js\");\n}\n*/\nexport class FluidRendererGUI {\n    private _gui: BABYLON.Nullable<LiLGUI.GUI>;\n    private _visible: boolean;\n    private _scene: BABYLON.Scene;\n    private _showGeneralMenu: boolean;\n    private _onKeyObserver: BABYLON.Nullable<\n        BABYLON.Observer<BABYLON.KeyboardInfo>\n    >;\n    private _targetRendererIndex: number;\n    private _targetRenderersGUIElements: LiLGUI.Controller[];\n    private _renderObjectIndex: number;\n    private _renderObjectsGUIElements: LiLGUI.Controller[];\n\n    public set visible(v: boolean) {\n        if (v === this._visible) {\n            return;\n        }\n        this._visible = v;\n        if (this._gui) {\n            this._gui.domElement.style.display = v ? \"\" : \"none\";\n        }\n    }\n\n    constructor(scene: BABYLON.Scene, showGeneralMenu = true) {\n        this._scene = scene;\n        this._showGeneralMenu = showGeneralMenu;\n        this._visible = false;\n        this._onKeyObserver = null;\n        this._targetRendererIndex = 0;\n        this._targetRenderersGUIElements = [];\n        this._renderObjectIndex = 0;\n        this._renderObjectsGUIElements = [];\n        this._gui = null;\n\n        this.initialize();\n    }\n\n    public dispose() {\n        const oldgui = document.getElementById(\"datGUI\");\n        if (oldgui !== null) {\n            oldgui.remove();\n            this._gui = null;\n        }\n        this._scene.onKeyboardObservable.remove(this._onKeyObserver);\n        this._onKeyObserver = null;\n    }\n\n    private _setupKeyboard(): void {\n        this._onKeyObserver = this._scene.onKeyboardObservable.add((kbInfo) => {\n            switch (kbInfo.type) {\n                case BABYLON.KeyboardEventTypes.KEYDOWN:\n                    //console.log(\"KEY DOWN: \", kbInfo.event.key);\n                    break;\n                case BABYLON.KeyboardEventTypes.KEYUP:\n                    switch (kbInfo.event.key) {\n                        case \"F8\": {\n                            this.visible = !this._visible;\n                            break;\n                        }\n                    }\n                    //console.log(\"KEY UP: \", kbInfo.event.key, kbInfo.event.keyCode);\n                    break;\n            }\n        });\n    }\n\n    public initialize(): void {\n        this.dispose();\n\n        this._gui = new LiLGUI.GUI({ title: \"Fluid Rendering\" });\n        this._gui.domElement.style.display = \"none\";\n        this._gui.domElement.style.marginTop = \"60px\";\n        this._gui.domElement.id = \"datGUI\";\n\n        this._setupKeyboard();\n\n        if (this._showGeneralMenu) {\n            this._makeMenuGeneral();\n        }\n        this._makeMenuTargetRenderers();\n        this._makeMenuRenderObjects();\n    }\n\n    private _addList(\n        menu: LiLGUI.GUI,\n        params: object,\n        name: string,\n        friendlyName: string,\n        list: any[]\n    ): LiLGUI.Controller {\n        return menu\n            .add(params, name, list)\n            .name(friendlyName)\n            .onChange((value: any) => {\n                this._parameterChanged(name, value);\n            });\n    }\n\n    private _addCheckbox(\n        menu: LiLGUI.GUI,\n        params: object,\n        name: string,\n        friendlyName: string\n    ): LiLGUI.Controller {\n        return menu\n            .add(params, name)\n            .name(friendlyName)\n            .onChange((value: any) => {\n                this._parameterChanged(name, value);\n            });\n    }\n\n    private _addSlider(\n        menu: LiLGUI.GUI,\n        params: object,\n        name: string,\n        friendlyName: string,\n        min: number,\n        max: number,\n        step: number\n    ): LiLGUI.Controller {\n        return menu\n            .add(params, name, min, max, step)\n            .name(friendlyName)\n            .onChange((value: any) => {\n                this._parameterChanged(name, value);\n            });\n    }\n\n    private _addColor(\n        menu: LiLGUI.GUI,\n        params: object,\n        name: string,\n        friendlyName: string\n    ): LiLGUI.Controller {\n        return menu\n            .addColor(params, name)\n            .name(friendlyName)\n            .onChange((value: any) => {\n                this._parameterChanged(name, value);\n            });\n    }\n\n    private _makeMenuGeneral(): void {\n        if (!this._gui) {\n            return;\n        }\n\n        const params = {\n            enable: this._parameterRead(\"enable\"),\n        };\n\n        const general = this._gui.addFolder(\"General\");\n\n        general.$title.style.fontWeight = \"bold\";\n\n        this._addCheckbox(general, params, \"enable\", \"Enable fluid renderer\");\n\n        general.open();\n    }\n\n    private _makeMenuTargetRenderers(): void {\n        if (\n            !this._gui ||\n            !(this._scene.fluidRenderer?.targetRenderers.length ?? 0)\n        ) {\n            return;\n        }\n\n        const params = {\n            targets_index: this._parameterRead(\"targets_index\"),\n            targets_generateDiffuseTexture: this._parameterRead(\n                \"targets_generateDiffuseTexture\"\n            ),\n            targets_fluidColor: this._parameterRead(\"targets_fluidColor\"),\n            targets_density: this._parameterRead(\"targets_density\"),\n            targets_refractionStrength: this._parameterRead(\n                \"targets_refractionStrength\"\n            ),\n            targets_fresnelClamp: this._parameterRead(\"targets_fresnelClamp\"),\n            targets_specularPower: this._parameterRead(\"targets_specularPower\"),\n            targets_minimumThickness: this._parameterRead(\n                \"targets_minimumThickness\"\n            ),\n            targets_debug: this._parameterRead(\"targets_debug\"),\n            targets_debugFeature: this._parameterRead(\"targets_debugFeature\"),\n            targets_enableBlurDepth: this._parameterRead(\n                \"targets_enableBlurDepth\"\n            ),\n            targets_blurDepthSizeDivisor: this._parameterRead(\n                \"targets_blurDepthSizeDivisor\"\n            ),\n            targets_blurDepthFilterSize: this._parameterRead(\n                \"targets_blurDepthFilterSize\"\n            ),\n            targets_blurDepthNumIterations: this._parameterRead(\n                \"targets_blurDepthNumIterations\"\n            ),\n            targets_blurDepthMaxFilterSize: this._parameterRead(\n                \"targets_blurDepthMaxFilterSize\"\n            ),\n            targets_blurDepthDepthScale: this._parameterRead(\n                \"targets_blurDepthDepthScale\"\n            ),\n            targets_enableBlurThickness: this._parameterRead(\n                \"targets_enableBlurThickness\"\n            ),\n            targets_blurThicknessSizeDivisor: this._parameterRead(\n                \"targets_blurThicknessSizeDivisor\"\n            ),\n            targets_blurThicknessFilterSize: this._parameterRead(\n                \"targets_blurThicknessFilterSize\"\n            ),\n            targets_blurThicknessNumIterations: this._parameterRead(\n                \"targets_blurThicknessNumIterations\"\n            ),\n            targets_depthMapSize: this._parameterRead(\"targets_depthMapSize\"),\n            targets_thicknessMapSize: this._parameterRead(\n                \"targets_thicknessMapSize\"\n            ),\n            targets_diffuseMapSize: this._parameterRead(\n                \"targets_diffuseMapSize\"\n            ),\n            targets_useVelocity: this._parameterRead(\"targets_useVelocity\"),\n            targets_useFixedThickness: this._parameterRead(\n                \"targets_useFixedThickness\"\n            ),\n        };\n\n        const targetRenderers = this._gui.addFolder(\"Target renderers\");\n        targetRenderers.$title.style.fontWeight = \"bold\";\n\n        const targetList: number[] = [];\n        if (this._scene.fluidRenderer) {\n            for (\n                let i = 0;\n                i < this._scene.fluidRenderer.targetRenderers.length;\n                ++i\n            ) {\n                targetList.push(i);\n            }\n        }\n\n        this._addList(\n            targetRenderers,\n            params,\n            \"targets_index\",\n            \"Index\",\n            targetList\n        );\n        this._targetRenderersGUIElements.push(\n            this._addList(\n                targetRenderers,\n                params,\n                \"targets_depthMapSize\",\n                \"Depth map size\",\n                [\"Screen size\", 256, 512, 1024, 2048, 4096]\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addList(\n                targetRenderers,\n                params,\n                \"targets_thicknessMapSize\",\n                \"Thickness map size\",\n                [\"Screen size\", 64, 128, 256, 512, 1024, 2048]\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addList(\n                targetRenderers,\n                params,\n                \"targets_diffuseMapSize\",\n                \"Diffuse map size\",\n                [\"Screen size\", 256, 512, 1024, 2048, 4096]\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                targetRenderers,\n                params,\n                \"targets_minimumThickness\",\n                \"Minimum thickness\",\n                0,\n                3,\n                0.001\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addCheckbox(\n                targetRenderers,\n                params,\n                \"targets_useFixedThickness\",\n                \"Use fixed thickness\"\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addCheckbox(\n                targetRenderers,\n                params,\n                \"targets_useVelocity\",\n                \"Use velocity\"\n            )\n        );\n\n        const menuColor = targetRenderers.addFolder(\"Color\");\n        menuColor.$title.style.fontStyle = \"italic\";\n\n        this._targetRenderersGUIElements.push(\n            this._addCheckbox(\n                menuColor,\n                params,\n                \"targets_generateDiffuseTexture\",\n                \"Generate diffuse texture\"\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addColor(\n                menuColor,\n                params,\n                \"targets_fluidColor\",\n                \"Fluid color\"\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuColor,\n                params,\n                \"targets_density\",\n                \"Density\",\n                0,\n                20,\n                0.01\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuColor,\n                params,\n                \"targets_refractionStrength\",\n                \"Refraction strength\",\n                0,\n                0.3,\n                0.005\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuColor,\n                params,\n                \"targets_fresnelClamp\",\n                \"Fresnel clamp\",\n                0,\n                1.0,\n                0.005\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuColor,\n                params,\n                \"targets_specularPower\",\n                \"Specular power\",\n                1,\n                5000,\n                5\n            )\n        );\n\n        const menuBlurDepth = targetRenderers.addFolder(\"Blur Depth\");\n        menuBlurDepth.$title.style.fontStyle = \"italic\";\n\n        this._targetRenderersGUIElements.push(\n            this._addCheckbox(\n                menuBlurDepth,\n                params,\n                \"targets_enableBlurDepth\",\n                \"Enable\"\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuBlurDepth,\n                params,\n                \"targets_blurDepthSizeDivisor\",\n                \"Size divisor\",\n                1,\n                10,\n                1\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuBlurDepth,\n                params,\n                \"targets_blurDepthFilterSize\",\n                \"Filter size\",\n                1,\n                20,\n                1\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuBlurDepth,\n                params,\n                \"targets_blurDepthNumIterations\",\n                \"Num iterations\",\n                1,\n                10,\n                1\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuBlurDepth,\n                params,\n                \"targets_blurDepthMaxFilterSize\",\n                \"Max filter size\",\n                1,\n                100,\n                1\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuBlurDepth,\n                params,\n                \"targets_blurDepthDepthScale\",\n                \"Depth scale\",\n                0,\n                100,\n                0.01\n            )\n        );\n\n        const menuBlurThickness = targetRenderers.addFolder(\"Blur Thickness\");\n        menuBlurThickness.$title.style.fontStyle = \"italic\";\n\n        this._targetRenderersGUIElements.push(\n            this._addCheckbox(\n                menuBlurThickness,\n                params,\n                \"targets_enableBlurThickness\",\n                \"Enable\"\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuBlurThickness,\n                params,\n                \"targets_blurThicknessSizeDivisor\",\n                \"Size divisor\",\n                1,\n                10,\n                1\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuBlurThickness,\n                params,\n                \"targets_blurThicknessFilterSize\",\n                \"Filter size\",\n                1,\n                20,\n                1\n            )\n        );\n        this._targetRenderersGUIElements.push(\n            this._addSlider(\n                menuBlurThickness,\n                params,\n                \"targets_blurThicknessNumIterations\",\n                \"Num iterations\",\n                1,\n                10,\n                1\n            )\n        );\n\n        const menuDebug = targetRenderers.addFolder(\"Debug\");\n        menuDebug.$title.style.fontStyle = \"italic\";\n\n        this._targetRenderersGUIElements.push(\n            this._addCheckbox(menuDebug, params, \"targets_debug\", \"Enable\")\n        );\n        this._targetRenderersGUIElements.push(\n            this._addList(\n                menuDebug,\n                params,\n                \"targets_debugFeature\",\n                \"Feature\",\n                Object.keys(FluidRenderingDebug).filter((k) => isNaN(Number(k)))\n            )\n        );\n\n        targetRenderers.open();\n    }\n\n    private _makeMenuRenderObjects(): void {\n        if (\n            !this._gui ||\n            !(this._scene.fluidRenderer?.renderObjects.length ?? 0)\n        ) {\n            return;\n        }\n\n        const params = {\n            objects_index: this._parameterRead(\"objects_index\"),\n            objects_particleSize: this._parameterRead(\"objects_particleSize\"),\n            objects_particleThicknessAlpha: this._parameterRead(\n                \"objects_particleThicknessAlpha\"\n            ),\n        };\n\n        const renderObjects = this._gui.addFolder(\"Render objects\");\n        renderObjects.$title.style.fontWeight = \"bold\";\n\n        const objectList: number[] = [];\n        if (this._scene.fluidRenderer) {\n            for (\n                let i = 0;\n                i < this._scene.fluidRenderer.renderObjects.length;\n                ++i\n            ) {\n                objectList.push(i);\n            }\n        }\n\n        this._addList(\n            renderObjects,\n            params,\n            \"objects_index\",\n            \"Index\",\n            objectList\n        );\n        this._renderObjectsGUIElements.push(\n            this._addSlider(\n                renderObjects,\n                params,\n                \"objects_particleSize\",\n                \"Particle size\",\n                0,\n                2,\n                0.001\n            )\n        );\n        this._renderObjectsGUIElements.push(\n            this._addSlider(\n                renderObjects,\n                params,\n                \"objects_particleThicknessAlpha\",\n                \"Particle alpha\",\n                0,\n                1,\n                0.001\n            )\n        );\n    }\n\n    private _readValue(obj: any, name: string): any {\n        const parts: string[] = name.split(\"_\");\n\n        for (let i = 0; i < parts.length; ++i) {\n            const part = parts[i];\n            obj = obj[parts[i]];\n\n            if (obj instanceof BABYLON.Color3) {\n                obj = obj.toHexString();\n            }\n\n            if (part === \"debugFeature\") {\n                obj = FluidRenderingDebug[obj];\n            }\n\n            if (part.endsWith(\"MapSize\") && obj === null) {\n                obj = \"Screen size\";\n            }\n        }\n\n        return obj;\n    }\n\n    private _setValue(obj: any, name: string, value: any): void {\n        const parts: string[] = name.split(\"_\");\n\n        for (let i = 0; i < parts.length - 1; ++i) {\n            obj = obj[parts[i]];\n            if (parts[i].endsWith(\"MapSize\") && value === \"Screen size\") {\n                value = null;\n            }\n        }\n\n        if (\n            parts[parts.length - 1].endsWith(\"MapSize\") &&\n            value === \"Screen size\"\n        ) {\n            value = null;\n        }\n\n        obj[parts[parts.length - 1]] = value;\n    }\n\n    private _parameterRead(name: string): any {\n        const fluidRenderer = this._scene.fluidRenderer;\n        switch (name) {\n            case \"enable\":\n                return !!this._scene.fluidRenderer;\n        }\n\n        if (name.startsWith(\"targets_\")) {\n            name = name.substring(8);\n            if (name === \"index\") {\n                return this._targetRendererIndex;\n            } else {\n                return fluidRenderer\n                    ? this._readValue(\n                          fluidRenderer.targetRenderers[\n                              this._targetRendererIndex\n                          ],\n                          name\n                      )\n                    : \"\";\n            }\n        }\n\n        if (name.startsWith(\"objects_\")) {\n            name = name.substring(8);\n            if (name === \"index\") {\n                return this._renderObjectIndex;\n            } else {\n                return fluidRenderer\n                    ? this._readValue(\n                          fluidRenderer.renderObjects[this._renderObjectIndex]\n                              .object,\n                          name\n                      )\n                    : \"\";\n            }\n        }\n    }\n\n    private _fillValues(listGUIElements: LiLGUI.Controller[], obj: any): void {\n        for (let i = 0; i < listGUIElements.length; ++i) {\n            const elem = listGUIElements[i];\n            const property = elem.property.split(\"_\")[1];\n            (elem.object as any)[elem.property] = this._readValue(\n                obj,\n                property\n            );\n            elem.updateDisplay();\n        }\n    }\n\n    public syncGUI(): void {\n        const fluidRenderer = this._scene.fluidRenderer;\n\n        if (fluidRenderer) {\n            this._fillValues(\n                this._targetRenderersGUIElements,\n                fluidRenderer.targetRenderers[this._targetRendererIndex]\n            );\n            this._fillValues(\n                this._renderObjectsGUIElements,\n                fluidRenderer.renderObjects[this._renderObjectIndex].object\n            );\n        }\n    }\n\n    private _parameterChanged(name: string, value: any): void {\n        const fluidRenderer = this._scene.fluidRenderer;\n        switch (name) {\n            case \"enable\":\n                if (value) {\n                    this._scene.enableFluidRenderer();\n                    this._targetRendererIndex = 0;\n                    this.initialize();\n                } else {\n                    this._scene.disableFluidRenderer();\n                    this._targetRendererIndex = 0;\n                    this.initialize();\n                }\n                return;\n            case \"targets_fluidColor\":\n                if (\n                    fluidRenderer &&\n                    fluidRenderer.targetRenderers.length >\n                        this._targetRendererIndex\n                ) {\n                    fluidRenderer.targetRenderers[\n                        this._targetRendererIndex\n                    ].fluidColor.copyFrom(BABYLON.Color3.FromHexString(value));\n                }\n                return;\n            case \"targets_debugFeature\": {\n                const typedDebugFeature: keyof typeof FluidRenderingDebug =\n                    value;\n                const val = FluidRenderingDebug[typedDebugFeature];\n                if (\n                    fluidRenderer &&\n                    fluidRenderer.targetRenderers.length >\n                        this._targetRendererIndex\n                ) {\n                    fluidRenderer.targetRenderers[\n                        this._targetRendererIndex\n                    ].debugFeature = val;\n                }\n                return;\n            }\n        }\n\n        if (name.startsWith(\"targets_\")) {\n            name = name.substring(8);\n            if (name === \"index\") {\n                this._targetRendererIndex = value || 0;\n                if (fluidRenderer) {\n                    this._fillValues(\n                        this._targetRenderersGUIElements,\n                        fluidRenderer.targetRenderers[this._targetRendererIndex]\n                    );\n                }\n            } else {\n                if (fluidRenderer) {\n                    this._setValue(\n                        fluidRenderer.targetRenderers[\n                            this._targetRendererIndex\n                        ],\n                        name,\n                        value === false\n                            ? false\n                            : value === true\n                            ? true\n                            : isNaN(value)\n                            ? value\n                            : parseFloat(value)\n                    );\n                }\n            }\n        }\n\n        if (name.startsWith(\"objects_\")) {\n            name = name.substring(8);\n            if (name === \"index\") {\n                this._renderObjectIndex = value || 0;\n                if (fluidRenderer) {\n                    this._fillValues(\n                        this._renderObjectsGUIElements,\n                        fluidRenderer.renderObjects[this._renderObjectIndex]\n                            .object\n                    );\n                }\n            } else {\n                if (fluidRenderer) {\n                    this._setValue(\n                        fluidRenderer.renderObjects[this._renderObjectIndex]\n                            .object,\n                        name,\n                        value === false\n                            ? false\n                            : value === true\n                            ? true\n                            : isNaN(value)\n                            ? value\n                            : parseFloat(value)\n                    );\n                }\n            }\n        }\n    }\n}\n"],"names":["FluidRendererGUI","constructor","scene","showGeneralMenu","this","_scene","_showGeneralMenu","_visible","_onKeyObserver","_targetRendererIndex","_targetRenderersGUIElements","_renderObjectIndex","_renderObjectsGUIElements","_gui","initialize","visible","v","domElement","style","display","dispose","oldgui","document","getElementById","remove","onKeyboardObservable","_setupKeyboard","add","kbInfo","type","event","key","title","marginTop","id","_makeMenuGeneral","_makeMenuTargetRenderers","_makeMenuRenderObjects","_addList","menu","params","name","friendlyName","list","onChange","value","_parameterChanged","_addCheckbox","_addSlider","min","max","step","_addColor","addColor","enable","_parameterRead","general","addFolder","$title","fontWeight","open","fluidRenderer","targetRenderers","length","targets_index","targets_generateDiffuseTexture","targets_fluidColor","targets_density","targets_refractionStrength","targets_fresnelClamp","targets_specularPower","targets_minimumThickness","targets_debug","targets_debugFeature","targets_enableBlurDepth","targets_blurDepthSizeDivisor","targets_blurDepthFilterSize","targets_blurDepthNumIterations","targets_blurDepthMaxFilterSize","targets_blurDepthDepthScale","targets_enableBlurThickness","targets_blurThicknessSizeDivisor","targets_blurThicknessFilterSize","targets_blurThicknessNumIterations","targets_depthMapSize","targets_thicknessMapSize","targets_diffuseMapSize","targets_useVelocity","targets_useFixedThickness","targetList","i","push","menuColor","fontStyle","menuBlurDepth","menuBlurThickness","menuDebug","Object","keys","FluidRenderingDebug","filter","k","isNaN","Number","renderObjects","objects_index","objects_particleSize","objects_particleThicknessAlpha","objectList","_readValue","obj","parts","split","part","toHexString","endsWith","_setValue","startsWith","substring","object","_fillValues","listGUIElements","elem","property","updateDisplay","syncGUI","enableFluidRenderer","disableFluidRenderer","fluidColor","copyFrom","typedDebugFeature","val","debugFeature","parseFloat"],"sourceRoot":""}