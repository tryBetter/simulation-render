{"version":3,"file":"419.6635f21c787adf6b4fac.js","mappings":"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","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRenderingRenderTarget.ts","webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRenderingTargetRenderer.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\n\nexport class FluidRenderingRenderTarget {\n    protected _name: string;\n    protected _scene: BABYLON.Scene;\n    protected _camera: BABYLON.Nullable<BABYLON.Camera>;\n    protected _engine: BABYLON.Engine;\n    protected _width: number;\n    protected _height: number;\n    protected _blurTextureSizeX: number;\n    protected _blurTextureSizeY: number;\n    protected _textureType: number;\n    protected _textureFormat: number;\n    protected _blurTextureType: number;\n    protected _blurTextureFormat: number;\n    protected _useStandardBlur: boolean;\n    protected _generateDepthBuffer: boolean;\n    protected _samples: number;\n    protected _postProcessRunningIndex: number;\n\n    protected _rt: BABYLON.Nullable<BABYLON.RenderTargetWrapper>;\n    protected _texture: BABYLON.Nullable<BABYLON.Texture>;\n    protected _rtBlur: BABYLON.Nullable<BABYLON.RenderTargetWrapper>;\n    protected _textureBlurred: BABYLON.Nullable<BABYLON.Texture>;\n    protected _blurPostProcesses: BABYLON.Nullable<BABYLON.PostProcess[]>;\n\n    public enableBlur = true;\n\n    public blurSizeDivisor = 1;\n\n    public blurFilterSize = 7;\n\n    private _blurNumIterations = 3;\n\n    public get blurNumIterations() {\n        return this._blurNumIterations;\n    }\n\n    public set blurNumIterations(numIterations: number) {\n        if (this._blurNumIterations === numIterations) {\n            return;\n        }\n\n        this._blurNumIterations = numIterations;\n        if (this._blurPostProcesses !== null) {\n            const blurX = this._blurPostProcesses[0];\n            const blurY = this._blurPostProcesses[1];\n\n            this._blurPostProcesses = [\n                ...Array(this._blurNumIterations * 2).keys(),\n            ].map((elm) => (elm & 1 ? blurY : blurX));\n        }\n    }\n\n    public blurMaxFilterSize = 100;\n\n    public blurDepthScale = 10;\n\n    public particleSize = 0.02;\n\n    public onDisposeObservable: BABYLON.Observable<FluidRenderingRenderTarget> =\n        new BABYLON.Observable<FluidRenderingRenderTarget>();\n\n    public get renderTarget() {\n        return this._rt;\n    }\n\n    public get renderTargetBlur() {\n        return this._rtBlur;\n    }\n\n    public get texture() {\n        return this._texture;\n    }\n\n    public get textureBlur() {\n        return this._textureBlurred;\n    }\n\n    constructor(\n        name: string,\n        scene: BABYLON.Scene,\n        width: number,\n        height: number,\n        blurTextureSizeX: number,\n        blurTextureSizeY: number,\n        textureType: number = BABYLON.Constants.TEXTURETYPE_FLOAT,\n        textureFormat: number = BABYLON.Constants.TEXTUREFORMAT_R,\n        blurTextureType: number = BABYLON.Constants.TEXTURETYPE_FLOAT,\n        blurTextureFormat: number = BABYLON.Constants.TEXTUREFORMAT_R,\n        useStandardBlur = false,\n        camera: BABYLON.Nullable<BABYLON.Camera> = null,\n        generateDepthBuffer = true,\n        samples = 1\n    ) {\n        this._name = name;\n        this._scene = scene;\n        this._camera = camera;\n        this._engine = scene.getEngine();\n        this._width = width;\n        this._height = height;\n        this._blurTextureSizeX = blurTextureSizeX;\n        this._blurTextureSizeY = blurTextureSizeY;\n        this._textureType = textureType;\n        this._textureFormat = textureFormat;\n        this._blurTextureType = blurTextureType;\n        this._blurTextureFormat = blurTextureFormat;\n        this._useStandardBlur = useStandardBlur;\n        this._generateDepthBuffer = generateDepthBuffer;\n        this._samples = samples;\n        this._postProcessRunningIndex = 0;\n        this.enableBlur = blurTextureSizeX !== 0 && blurTextureSizeY !== 0;\n\n        this._rt = null;\n        this._texture = null;\n        this._rtBlur = null;\n        this._textureBlurred = null;\n        this._blurPostProcesses = null;\n    }\n\n    public initialize(): void {\n        this.dispose();\n\n        this._createRenderTarget();\n\n        if (this.enableBlur && this._texture) {\n            const [rtBlur, textureBlurred, blurPostProcesses] =\n                this._createBlurPostProcesses(\n                    this._texture,\n                    this._blurTextureType,\n                    this._blurTextureFormat,\n                    this.blurSizeDivisor,\n                    this._name,\n                    this._useStandardBlur\n                );\n            this._rtBlur = rtBlur;\n            this._textureBlurred = textureBlurred;\n            this._blurPostProcesses = blurPostProcesses;\n        }\n    }\n\n    public applyBlurPostProcesses(): void {\n        if (this.enableBlur && this._blurPostProcesses) {\n            this._postProcessRunningIndex = 0;\n            this._scene.postProcessManager.directRender(\n                this._blurPostProcesses,\n                this._rtBlur,\n                true\n            );\n            this._engine.unBindFramebuffer(this._rtBlur!);\n        }\n    }\n\n    protected _createRenderTarget(): void {\n        this._rt = this._engine.createRenderTargetTexture(\n            { width: this._width, height: this._height },\n            {\n                generateMipMaps: false,\n                type: this._textureType,\n                format: this._textureFormat,\n                samplingMode: BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                generateDepthBuffer: this._generateDepthBuffer,\n                generateStencilBuffer: false,\n                samples: this._samples,\n            }\n        );\n\n        const renderTexture = this._rt.texture!;\n\n        this._texture = new BABYLON.Texture(null, this._scene);\n        this._texture.name = \"rtt\" + this._name;\n        this._texture._texture = renderTexture;\n        this._texture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n        this._texture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n        this._texture.anisotropicFilteringLevel = 1;\n    }\n\n    protected _createBlurPostProcesses(\n        textureBlurSource: BABYLON.ThinTexture,\n        textureType: number,\n        textureFormat: number,\n        blurSizeDivisor: number,\n        debugName: string,\n        useStandardBlur = false\n    ): [BABYLON.RenderTargetWrapper, BABYLON.Texture, BABYLON.PostProcess[]] {\n        const engine = this._scene.getEngine();\n        const targetSize = new BABYLON.Vector2(\n            Math.floor(this._blurTextureSizeX / blurSizeDivisor),\n            Math.floor(this._blurTextureSizeY / blurSizeDivisor)\n        );\n        const useBilinearFiltering =\n            (textureType === BABYLON.Constants.TEXTURETYPE_FLOAT &&\n                engine.getCaps().textureFloatLinearFiltering) ||\n            (textureType === BABYLON.Constants.TEXTURETYPE_HALF_FLOAT &&\n                engine.getCaps().textureHalfFloatLinearFiltering);\n\n        const rtBlur = this._engine.createRenderTargetTexture(\n            { width: targetSize.x, height: targetSize.y },\n            {\n                generateMipMaps: false,\n                type: textureType,\n                format: textureFormat,\n                samplingMode: useBilinearFiltering\n                    ? BABYLON.Constants.TEXTURE_BILINEAR_SAMPLINGMODE\n                    : BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                generateDepthBuffer: false,\n                generateStencilBuffer: false,\n                samples: this._samples,\n            }\n        );\n\n        const renderTexture = rtBlur.texture!;\n\n        const texture = new BABYLON.Texture(null, this._scene);\n        texture.name = \"rttBlurred\" + debugName;\n        texture._texture = renderTexture;\n        texture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n        texture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n        texture.anisotropicFilteringLevel = 1;\n\n        if (useStandardBlur) {\n            const kernelBlurXPostprocess = new BABYLON.PostProcess(\n                \"BilateralBlurX\",\n                \"standardBlur\",\n                [\"filterSize\", \"blurDir\"],\n                null,\n                1,\n                null,\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                engine,\n                true,\n                null,\n                textureType,\n                undefined,\n                undefined,\n                undefined,\n                textureFormat\n            );\n            kernelBlurXPostprocess.samples = this._samples;\n            kernelBlurXPostprocess.externalTextureSamplerBinding = true;\n            kernelBlurXPostprocess.onApplyObservable.add((effect) => {\n                if (this._postProcessRunningIndex === 0) {\n                    effect.setTexture(\"textureSampler\", textureBlurSource);\n                } else {\n                    effect._bindTexture(\n                        \"textureSampler\",\n                        kernelBlurXPostprocess.inputTexture.texture\n                    );\n                }\n                effect.setInt(\"filterSize\", this.blurFilterSize);\n                effect.setFloat2(\"blurDir\", 1 / this._blurTextureSizeX, 0);\n                this._postProcessRunningIndex++;\n            });\n            kernelBlurXPostprocess.onSizeChangedObservable.add(() => {\n                kernelBlurXPostprocess._textures.forEach((rt) => {\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                });\n            });\n            this._fixReusablePostProcess(kernelBlurXPostprocess);\n\n            const kernelBlurYPostprocess = new BABYLON.PostProcess(\n                \"BilateralBlurY\",\n                \"standardBlur\",\n                [\"filterSize\", \"blurDir\"],\n                null,\n                1,\n                null,\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                engine,\n                true,\n                null,\n                textureType,\n                undefined,\n                undefined,\n                undefined,\n                textureFormat\n            );\n            kernelBlurYPostprocess.samples = this._samples;\n            kernelBlurYPostprocess.onApplyObservable.add((effect) => {\n                effect.setInt(\"filterSize\", this.blurFilterSize);\n                effect.setFloat2(\"blurDir\", 0, 1 / this._blurTextureSizeY);\n                this._postProcessRunningIndex++;\n            });\n            kernelBlurYPostprocess.onSizeChangedObservable.add(() => {\n                kernelBlurYPostprocess._textures.forEach((rt) => {\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                });\n            });\n            this._fixReusablePostProcess(kernelBlurYPostprocess);\n\n            kernelBlurXPostprocess.autoClear = false;\n            kernelBlurYPostprocess.autoClear = false;\n\n            return [\n                rtBlur,\n                texture,\n                [...Array(this._blurNumIterations * 2).keys()].map((elm) =>\n                    elm & 1 ? kernelBlurYPostprocess : kernelBlurXPostprocess\n                ),\n            ];\n        } else {\n            const uniforms: string[] = [\n                \"maxFilterSize\",\n                \"blurDir\",\n                \"projectedParticleConstant\",\n                \"depthThreshold\",\n            ];\n\n            const kernelBlurXPostprocess = new BABYLON.PostProcess(\n                \"BilateralBlurX\",\n                \"bilateralBlur\",\n                uniforms,\n                null,\n                1,\n                null,\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                engine,\n                true,\n                null,\n                textureType,\n                undefined,\n                undefined,\n                undefined,\n                textureFormat\n            );\n            kernelBlurXPostprocess.samples = this._samples;\n            kernelBlurXPostprocess.externalTextureSamplerBinding = true;\n            kernelBlurXPostprocess.onApplyObservable.add((effect) => {\n                if (this._postProcessRunningIndex === 0) {\n                    effect.setTexture(\"textureSampler\", textureBlurSource);\n                } else {\n                    effect._bindTexture(\n                        \"textureSampler\",\n                        kernelBlurXPostprocess.inputTexture.texture\n                    );\n                }\n                effect.setInt(\"maxFilterSize\", this.blurMaxFilterSize);\n                effect.setFloat2(\"blurDir\", 1 / this._blurTextureSizeX, 0);\n                effect.setFloat(\n                    \"projectedParticleConstant\",\n                    this._getProjectedParticleConstant()\n                );\n                effect.setFloat(\"depthThreshold\", this._getDepthThreshold());\n                this._postProcessRunningIndex++;\n            });\n            kernelBlurXPostprocess.onSizeChangedObservable.add(() => {\n                kernelBlurXPostprocess._textures.forEach((rt) => {\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                });\n            });\n            this._fixReusablePostProcess(kernelBlurXPostprocess);\n\n            const kernelBlurYPostprocess = new BABYLON.PostProcess(\n                \"BilateralBlurY\",\n                \"bilateralBlur\",\n                uniforms,\n                null,\n                1,\n                null,\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n                engine,\n                true,\n                null,\n                textureType,\n                undefined,\n                undefined,\n                undefined,\n                textureFormat\n            );\n            kernelBlurYPostprocess.samples = this._samples;\n            kernelBlurYPostprocess.onApplyObservable.add((effect) => {\n                effect.setInt(\"maxFilterSize\", this.blurMaxFilterSize);\n                effect.setFloat2(\"blurDir\", 0, 1 / this._blurTextureSizeY);\n                effect.setFloat(\n                    \"projectedParticleConstant\",\n                    this._getProjectedParticleConstant()\n                );\n                effect.setFloat(\"depthThreshold\", this._getDepthThreshold());\n                this._postProcessRunningIndex++;\n            });\n            kernelBlurYPostprocess.onSizeChangedObservable.add(() => {\n                kernelBlurYPostprocess._textures.forEach((rt) => {\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                });\n            });\n            this._fixReusablePostProcess(kernelBlurYPostprocess);\n\n            kernelBlurXPostprocess.autoClear = false;\n            kernelBlurYPostprocess.autoClear = false;\n\n            return [\n                rtBlur,\n                texture,\n                [...Array(this._blurNumIterations * 2).keys()].map((elm) =>\n                    elm & 1 ? kernelBlurYPostprocess : kernelBlurXPostprocess\n                ),\n            ];\n        }\n    }\n\n    private _fixReusablePostProcess(pp: BABYLON.PostProcess) {\n        if (!pp.isReusable()) {\n            return;\n        }\n\n        pp.onActivateObservable.add(() => {\n            // undo what calling activate() does which will make sure we will retrieve the right texture when getting the input for the post process\n            pp._currentRenderTextureInd = (pp._currentRenderTextureInd + 1) % 2;\n        });\n        pp.onApplyObservable.add(() => {\n            // now we can advance to the next texture\n            pp._currentRenderTextureInd = (pp._currentRenderTextureInd + 1) % 2;\n        });\n    }\n\n    private _getProjectedParticleConstant() {\n        return (\n            (this.blurFilterSize *\n                this.particleSize *\n                0.05 *\n                (this._height / 2)) /\n            Math.tan((this._camera?.fov ?? (45 * Math.PI) / 180) / 2)\n        );\n    }\n\n    private _getDepthThreshold() {\n        return (this.particleSize / 2) * this.blurDepthScale;\n    }\n\n    public dispose(): void {\n        if (this.onDisposeObservable.hasObservers()) {\n            this.onDisposeObservable.notifyObservers(this);\n        }\n\n        this._rt?.dispose();\n        this._rt = null;\n        this._rtBlur?.dispose();\n        this._rtBlur = null;\n        if (this._blurPostProcesses) {\n            this._blurPostProcesses[0].dispose();\n            this._blurPostProcesses[1].dispose();\n        }\n        this._blurPostProcesses = null;\n    }\n}\n","import * as BABYLON from \"@babylonjs/core\";\n\nimport { FluidRenderingObject } from \"./fluidRenderingObject\";\nimport { FluidRenderingRenderTarget } from \"./fluidRenderingRenderTarget\";\n\nexport enum FluidRenderingDebug {\n    DepthTexture,\n    DepthBlurredTexture,\n    ThicknessTexture,\n    ThicknessBlurredTexture,\n    DiffuseTexture,\n    Normals,\n    DiffuseRendering,\n}\n\nexport class FluidRenderingTargetRenderer {\n    protected _scene: BABYLON.Scene;\n    protected _camera: BABYLON.Nullable<BABYLON.Camera>;\n    protected _engine: BABYLON.Engine;\n\n    protected _depthRenderTarget: BABYLON.Nullable<FluidRenderingRenderTarget>;\n    protected _diffuseRenderTarget: BABYLON.Nullable<FluidRenderingRenderTarget>;\n    protected _thicknessRenderTarget: BABYLON.Nullable<FluidRenderingRenderTarget>;\n    private _defaultPPLine: BABYLON.Nullable<BABYLON.DefaultRenderingPipeline> = null;\n\n    protected _renderPostProcess: BABYLON.Nullable<BABYLON.PostProcess>;\n\n    protected _invProjectionMatrix: BABYLON.Matrix;\n    protected _depthClearColor: BABYLON.Color4;\n    protected _thicknessClearColor: BABYLON.Color4;\n\n    protected _needInitialization: boolean;\n\n    public get needInitialization() {\n        return this._needInitialization;\n    }\n\n    private _generateDiffuseTexture = false;\n\n    public get generateDiffuseTexture() {\n        return this._generateDiffuseTexture;\n    }\n\n    public set generateDiffuseTexture(generate: boolean) {\n        if (this._generateDiffuseTexture === generate) {\n            return;\n        }\n\n        this._generateDiffuseTexture = generate;\n        this._needInitialization = true;\n    }\n\n    public fluidColor = new BABYLON.Color3(0.085, 0.6375, 0.765);\n    public surfaceColor = new BABYLON.Color3(0.0,0.3,0.8);\n\n    public density = 2;\n\n    public refractionStrength = 0.0;\n\n    public fresnelClamp = 0.15;\n\n    public specularPower = 2645;\n\n    public minimumThickness = 0;\n\n    public dirLight: BABYLON.Vector3 = new BABYLON.Vector3(\n        -2,\n        -1,\n        1\n    ).normalize();\n\n    private _debugFeature: FluidRenderingDebug =\n        FluidRenderingDebug.DepthBlurredTexture;\n\n    public get debugFeature() {\n        return this._debugFeature;\n    }\n\n    public set debugFeature(feature: FluidRenderingDebug) {\n        if (this._debugFeature === feature) {\n            return;\n        }\n\n        this._needInitialization = true;\n        this._debugFeature = feature;\n    }\n\n    private _debug = false;\n\n    public get debug() {\n        return this._debug;\n    }\n\n    public set debug(debug: boolean) {\n        if (this._debug === debug) {\n            return;\n        }\n\n        this._debug = debug;\n        this._needInitialization = true;\n    }\n\n    private _enableBlurDepth = true;\n\n    public get enableBlurDepth() {\n        return this._enableBlurDepth;\n    }\n\n    public set enableBlurDepth(enable: boolean) {\n        if (this._enableBlurDepth === enable) {\n            return;\n        }\n\n        this._enableBlurDepth = enable;\n        this._needInitialization = true;\n    }\n\n    private _blurDepthSizeDivisor = 1;\n\n    public get blurDepthSizeDivisor() {\n        return this._blurDepthSizeDivisor;\n    }\n\n    public set blurDepthSizeDivisor(scale: number) {\n        if (this._blurDepthSizeDivisor === scale) {\n            return;\n        }\n\n        this._blurDepthSizeDivisor = scale;\n        this._needInitialization = true;\n    }\n\n    private _blurDepthFilterSize = 7;\n\n    public get blurDepthFilterSize() {\n        return this._blurDepthFilterSize;\n    }\n\n    public set blurDepthFilterSize(filterSize: number) {\n        if (this._blurDepthFilterSize === filterSize) {\n            return;\n        }\n\n        this._blurDepthFilterSize = filterSize;\n        this._setBlurParameters();\n    }\n\n    private _blurDepthNumIterations = 3;\n\n    public get blurDepthNumIterations() {\n        return this._blurDepthNumIterations;\n    }\n\n    public set blurDepthNumIterations(numIterations: number) {\n        if (this._blurDepthNumIterations === numIterations) {\n            return;\n        }\n\n        this._blurDepthNumIterations = numIterations;\n        this._setBlurParameters();\n    }\n\n    private _blurDepthMaxFilterSize = 100;\n\n    public get blurDepthMaxFilterSize() {\n        return this._blurDepthMaxFilterSize;\n    }\n\n    public set blurDepthMaxFilterSize(maxFilterSize: number) {\n        if (this._blurDepthMaxFilterSize === maxFilterSize) {\n            return;\n        }\n\n        this._blurDepthMaxFilterSize = maxFilterSize;\n        this._setBlurParameters();\n    }\n\n    private _blurDepthDepthScale = 10;\n\n    public get blurDepthDepthScale() {\n        return this._blurDepthDepthScale;\n    }\n\n    public set blurDepthDepthScale(scale: number) {\n        if (this._blurDepthDepthScale === scale) {\n            return;\n        }\n\n        this._blurDepthDepthScale = scale;\n        this._setBlurParameters();\n    }\n\n    private _enableBlurThickness = true;\n\n    public get enableBlurThickness() {\n        return this._enableBlurThickness;\n    }\n\n    public set enableBlurThickness(enable: boolean) {\n        if (this._enableBlurThickness === enable) {\n            return;\n        }\n\n        this._enableBlurThickness = enable;\n        this._needInitialization = true;\n    }\n\n    private _blurThicknessSizeDivisor = 1;\n\n    public get blurThicknessSizeDivisor() {\n        return this._blurThicknessSizeDivisor;\n    }\n\n    public set blurThicknessSizeDivisor(scale: number) {\n        if (this._blurThicknessSizeDivisor === scale) {\n            return;\n        }\n\n        this._blurThicknessSizeDivisor = scale;\n        this._needInitialization = true;\n    }\n\n    private _blurThicknessFilterSize = 5;\n\n    public get blurThicknessFilterSize() {\n        return this._blurThicknessFilterSize;\n    }\n\n    public set blurThicknessFilterSize(filterSize: number) {\n        if (this._blurThicknessFilterSize === filterSize) {\n            return;\n        }\n\n        this._blurThicknessFilterSize = filterSize;\n        this._setBlurParameters();\n    }\n\n    private _blurThicknessNumIterations = 1;\n\n    public get blurThicknessNumIterations() {\n        return this._blurThicknessNumIterations;\n    }\n\n    public set blurThicknessNumIterations(numIterations: number) {\n        if (this._blurThicknessNumIterations === numIterations) {\n            return;\n        }\n\n        this._blurThicknessNumIterations = numIterations;\n        this._setBlurParameters();\n    }\n\n    private _useFixedThickness = false;\n\n    public get useFixedThickness() {\n        return this._useFixedThickness;\n    }\n\n    public set useFixedThickness(use: boolean) {\n        if (this._useFixedThickness === use) {\n            return;\n        }\n\n        this._useFixedThickness = use;\n        this._needInitialization = true;\n    }\n\n    /** @hidden */\n    public _bgDepthTexture: BABYLON.Nullable<BABYLON.InternalTexture>;\n\n    public onUseVelocityChanged =\n        new BABYLON.Observable<FluidRenderingTargetRenderer>();\n\n    private _useVelocity = false;\n\n    public get useVelocity() {\n        return this._useVelocity;\n    }\n\n    public set useVelocity(use: boolean) {\n        if (this._useVelocity === use) {\n            return;\n        }\n\n        this._useVelocity = use;\n        this._needInitialization = true;\n        this.onUseVelocityChanged.notifyObservers(this);\n    }\n\n    private _depthMapSize: BABYLON.Nullable<number> = null;\n\n    public get depthMapSize() {\n        return this._depthMapSize;\n    }\n\n    public set depthMapSize(size: BABYLON.Nullable<number>) {\n        if (this._depthMapSize === size) {\n            return;\n        }\n\n        this._depthMapSize = size;\n        this._needInitialization = true;\n    }\n\n    private _thicknessMapSize: BABYLON.Nullable<number> = null;\n\n    public get thicknessMapSize() {\n        return this._thicknessMapSize;\n    }\n\n    public set thicknessMapSize(size: BABYLON.Nullable<number>) {\n        if (this._thicknessMapSize === size) {\n            return;\n        }\n\n        this._thicknessMapSize = size;\n        this._needInitialization = true;\n    }\n\n    private _diffuseMapSize: BABYLON.Nullable<number> = null;\n\n    public get diffuseMapSize() {\n        return this._diffuseMapSize;\n    }\n\n    public set diffuseMapSize(size: BABYLON.Nullable<number>) {\n        if (this._diffuseMapSize === size) {\n            return;\n        }\n\n        this._diffuseMapSize = size;\n        this._needInitialization = true;\n    }\n\n    // Note: changing this value does not work because depth/stencil textures can't be created with MSAA yet (see https://github.com/BabylonJS/Babylon.js/issues/12444)\n    private _samples = 1;\n\n    public get samples() {\n        return this._samples;\n    }\n\n    public set samples(samples: number) {\n        if (this._samples === samples) {\n            return;\n        }\n\n        this._samples = samples;\n        this._needInitialization = true;\n    }\n\n    public get camera() {\n        return this._camera;\n    }\n\n    /** @hidden */\n    public get renderPostProcess() {\n        return this._renderPostProcess;\n    }\n\n    /** @hidden */\n    public get depthRenderTarget() {\n        return this._depthRenderTarget;\n    }\n\n    /** @hidden */\n    public get thicknessRenderTarget() {\n        return this._thicknessRenderTarget;\n    }\n\n    /** @hidden */\n    public get diffuseRenderTarget() {\n        return this._diffuseRenderTarget;\n    }\n\n    constructor(scene: BABYLON.Scene, camera?: BABYLON.Camera) {\n        this._scene = scene;\n        this._engine = scene.getEngine();\n        this._camera = camera ?? scene.activeCamera;\n        this._needInitialization = true;\n        this._bgDepthTexture = null;\n\n        this._invProjectionMatrix = new BABYLON.Matrix();\n        this._depthClearColor = new BABYLON.Color4(1e6, 1e6, 1e6, 1);\n        this._thicknessClearColor = new BABYLON.Color4(0, 0, 0, 1);\n\n        this._depthRenderTarget = null;\n        this._diffuseRenderTarget = null;\n        this._thicknessRenderTarget = null;\n\n        this._renderPostProcess = null;\n    }\n\n    public initialize(): void {\n        this.dispose();\n\n        this._needInitialization = false;\n\n        const depthWidth = this._depthMapSize ?? this._engine.getRenderWidth();\n        const depthHeight =\n            this._depthMapSize !== null\n                ? Math.round(\n                      (this._depthMapSize * this._engine.getRenderHeight()) /\n                          this._engine.getRenderWidth()\n                  )\n                : this._engine.getRenderHeight();\n\n        this._depthRenderTarget = new FluidRenderingRenderTarget(\n            \"Depth\",\n            this._scene,\n            depthWidth,\n            depthHeight,\n            depthWidth,\n            depthHeight,\n            BABYLON.Constants.TEXTURETYPE_FLOAT,\n            BABYLON.Constants.TEXTUREFORMAT_RG,\n            BABYLON.Constants.TEXTURETYPE_FLOAT,\n            BABYLON.Constants.TEXTUREFORMAT_RG,\n            false,\n            this._camera,\n            true,\n            this._samples\n        );\n\n        this._initializeRenderTarget(this._depthRenderTarget);\n\n        if (this.generateDiffuseTexture) {\n            const diffuseWidth =\n                this._diffuseMapSize ?? this._engine.getRenderWidth();\n            const diffuseHeight =\n                this._diffuseMapSize !== null\n                    ? Math.round(\n                          (this._diffuseMapSize *\n                              this._engine.getRenderHeight()) /\n                              this._engine.getRenderWidth()\n                      )\n                    : this._engine.getRenderHeight();\n\n            this._diffuseRenderTarget = new FluidRenderingRenderTarget(\n                \"Diffuse\",\n                this._scene,\n                diffuseWidth,\n                diffuseHeight,\n                0,\n                0,\n                BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                BABYLON.Constants.TEXTUREFORMAT_RGBA,\n                BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE,\n                BABYLON.Constants.TEXTUREFORMAT_RGBA,\n                true,\n                this._camera,\n                true,\n                this._samples\n            );\n\n            this._initializeRenderTarget(this._diffuseRenderTarget);\n        }\n\n        const thicknessWidth =\n            this._thicknessMapSize ?? this._engine.getRenderWidth();\n        const thicknessHeight =\n            this._thicknessMapSize !== null\n                ? Math.round(\n                      (this._thicknessMapSize *\n                          this._engine.getRenderHeight()) /\n                          this._engine.getRenderWidth()\n                  )\n                : this._engine.getRenderHeight();\n\n        if (!this._useFixedThickness) {\n            this._thicknessRenderTarget = new FluidRenderingRenderTarget(\n                \"Thickness\",\n                this._scene,\n                thicknessWidth,\n                thicknessHeight,\n                thicknessWidth,\n                thicknessHeight,\n                BABYLON.Constants.TEXTURETYPE_HALF_FLOAT,\n                BABYLON.Constants.TEXTUREFORMAT_R,\n                BABYLON.Constants.TEXTURETYPE_HALF_FLOAT,\n                BABYLON.Constants.TEXTUREFORMAT_R,\n                true,\n                this._camera,\n                false,\n                this._samples\n            );\n\n            this._initializeRenderTarget(this._thicknessRenderTarget);\n        }\n\n        this._createLiquidRenderingPostProcess();\n    }\n\n    protected _setBlurParameters(\n        renderTarget: BABYLON.Nullable<FluidRenderingRenderTarget> = null\n    ): void {\n        if (renderTarget === null || renderTarget === this._depthRenderTarget) {\n            this._setBlurDepthParameters();\n        }\n        if (\n            renderTarget === null ||\n            renderTarget === this._thicknessRenderTarget\n        ) {\n            this._setBlurThicknessParameters();\n        }\n    }\n\n    protected _setBlurDepthParameters(): void {\n        if (!this._depthRenderTarget) {\n            return;\n        }\n        this._depthRenderTarget.blurFilterSize = this.blurDepthFilterSize;\n        this._depthRenderTarget.blurMaxFilterSize = this.blurDepthMaxFilterSize;\n        this._depthRenderTarget.blurNumIterations = this.blurDepthNumIterations;\n        this._depthRenderTarget.blurDepthScale = this.blurDepthDepthScale;\n    }\n\n    protected _setBlurThicknessParameters(): void {\n        if (!this._thicknessRenderTarget) {\n            return;\n        }\n        this._thicknessRenderTarget.blurFilterSize =\n            this.blurThicknessFilterSize;\n        this._thicknessRenderTarget.blurNumIterations =\n            this.blurThicknessNumIterations;\n    }\n\n    protected _initializeRenderTarget(\n        renderTarget: FluidRenderingRenderTarget\n    ): void {\n        if (renderTarget !== this._diffuseRenderTarget) {\n            renderTarget.enableBlur =\n                renderTarget === this._depthRenderTarget\n                    ? this.enableBlurDepth\n                    : this.enableBlurThickness;\n            renderTarget.blurSizeDivisor =\n                renderTarget === this._depthRenderTarget\n                    ? this.blurDepthSizeDivisor\n                    : this.blurThicknessSizeDivisor;\n        }\n\n        this._setBlurParameters(renderTarget);\n\n        renderTarget.initialize();\n    }\n\n    protected _createLiquidRenderingPostProcess(): void {\n        const engine = this._scene.getEngine();\n\n        const uniformNames = [\n            \"viewMatrix\",\n            \"projectionMatrix\",\n            \"invProjectionMatrix\",\n            \"texelSize\",\n            \"dirLight\",\n            \"cameraFar\",\n            \"density\",\n            \"refractionStrength\",\n            \"fresnelClamp\",\n            \"specularPower\",\n            \"surfaceColor\"\n        ];\n        const samplerNames = [\"depthSampler\", \"reflectionSampler\"];\n        const defines = [];\n\n        this.dispose(true);\n\n        if (!this._camera) {\n            return;\n        }\n\n        const texture = this._depthRenderTarget!.enableBlur\n            ? this._depthRenderTarget!.textureBlur!\n            : this._depthRenderTarget!.texture!;\n        const texelSize = new BABYLON.Vector2(\n            1 / texture.getSize().width,\n            1 / texture.getSize().height\n        );\n\n        if (this._diffuseRenderTarget) {\n            samplerNames.push(\"diffuseSampler\");\n            defines.push(\"#define FLUIDRENDERING_DIFFUSETEXTURE\");\n        } else {\n            uniformNames.push(\"diffuseColor\");\n        }\n\n        if (this._useVelocity) {\n            samplerNames.push(\"velocitySampler\");\n            defines.push(\"#define FLUIDRENDERING_VELOCITY\");\n        }\n\n        if (this._useFixedThickness) {\n            uniformNames.push(\"thickness\");\n            samplerNames.push(\"bgDepthSampler\");\n            defines.push(\"#define FLUIDRENDERING_FIXED_THICKNESS\");\n        } else {\n            uniformNames.push(\"minimumThickness\");\n            samplerNames.push(\"thicknessSampler\");\n        }\n\n        if (this._debug) {\n            defines.push(\"#define FLUIDRENDERING_DEBUG\");\n            if (this._debugFeature === FluidRenderingDebug.Normals) {\n                defines.push(\"#define FLUIDRENDERING_DEBUG_SHOWNORMAL\");\n            } else if (\n                this._debugFeature === FluidRenderingDebug.DiffuseRendering\n            ) {\n                defines.push(\"#define FLUIDRENDERING_DEBUG_DIFFUSERENDERING\");\n            } else {\n                defines.push(\"#define FLUIDRENDERING_DEBUG_TEXTURE\");\n                samplerNames.push(\"debugSampler\");\n                if (\n                    this._debugFeature === FluidRenderingDebug.DepthTexture ||\n                    this._debugFeature ===\n                        FluidRenderingDebug.DepthBlurredTexture\n                ) {\n                    defines.push(\"#define FLUIDRENDERING_DEBUG_DEPTH\");\n                }\n            }\n        }\n\n        this._renderPostProcess = new BABYLON.PostProcess(\n            \"FluidRendering\",\n            \"renderFluid\",\n            uniformNames,\n            samplerNames,\n            1,\n            null,\n            BABYLON.Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\n            engine,\n            false,\n            null,\n            BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE,\n            undefined,\n            undefined,\n            true\n        );\n        this._renderPostProcess.updateEffect = function (\n            defines: BABYLON.Nullable<string> = null,\n            uniforms: BABYLON.Nullable<string[]> = null,\n            samplers: BABYLON.Nullable<string[]> = null,\n            indexParameters?: any,\n            onCompiled?: (effect: BABYLON.Effect) => void,\n            onError?: (effect: BABYLON.Effect, errors: string) => void,\n            vertexUrl?: string,\n            fragmentUrl?: string\n        ) {\n            (this as any)._postProcessDefines = defines;\n            (this as any)._drawWrapper.effect = (\n                this as any\n            )._engine.createEffect(\n                {\n                    vertex: vertexUrl ?? (this as any)._vertexUrl,\n                    fragment: fragmentUrl ?? (this as any)._fragmentUrl,\n                },\n                [\"position\"],\n                uniforms || (this as any)._parameters,\n                samplers || (this as any)._samplers,\n                defines !== null ? defines : \"\",\n                undefined,\n                onCompiled,\n                onError,\n                indexParameters || (this as any)._indexParameters,\n                engine.isWebGPU\n                    ? BABYLON.ShaderLanguage.WGSL\n                    : BABYLON.ShaderLanguage.GLSL\n            );\n        };\n        this._renderPostProcess.updateEffect(defines.join(\"\\n\"));\n\n        this._renderPostProcess.samples = this._samples;\n        this._renderPostProcess.onApplyObservable.add((effect) => {\n            this._invProjectionMatrix.copyFrom(\n                this._scene.getProjectionMatrix()\n            );\n            this._invProjectionMatrix.invert();\n\n            effect.setColor3(\"surfaceColor\", this.surfaceColor);\n            if (engine.isWebGPU) {\n                effect.setTextureSampler(\n                    \"textureSamplerSampler\",\n                    this._renderPostProcess!.inputTexture.texture\n                );\n            }\n\n            if (!this._depthRenderTarget!.enableBlur) {\n                effect.setTexture(\n                    \"depthSampler\",\n                    this._depthRenderTarget!.texture\n                );\n                if (engine.isWebGPU) {\n                    effect.setTextureSampler(\n                        \"depthSamplerSampler\",\n                        this._depthRenderTarget!.texture?.getInternalTexture() ??\n                            null\n                    );\n                }\n            } else {\n                effect.setTexture(\n                    \"depthSampler\",\n                    this._depthRenderTarget!.textureBlur\n                );\n                if (engine.isWebGPU) {\n                    effect.setTextureSampler(\n                        \"depthSamplerSampler\",\n                        this._depthRenderTarget!.textureBlur?.getInternalTexture() ??\n                            null\n                    );\n                }\n            }\n            if (this._diffuseRenderTarget) {\n                if (!this._diffuseRenderTarget.enableBlur) {\n                    effect.setTexture(\n                        \"diffuseSampler\",\n                        this._diffuseRenderTarget.texture\n                    );\n                    if (engine.isWebGPU) {\n                        effect.setTextureSampler(\n                            \"diffuseSamplerSampler\",\n                            this._diffuseRenderTarget.texture?.getInternalTexture() ??\n                                null\n                        );\n                    }\n                } else {\n                    effect.setTexture(\n                        \"diffuseSampler\",\n                        this._diffuseRenderTarget.textureBlur\n                    );\n                    if (engine.isWebGPU) {\n                        effect.setTextureSampler(\n                            \"diffuseSamplerSampler\",\n                            this._diffuseRenderTarget.textureBlur?.getInternalTexture() ??\n                                null\n                        );\n                    }\n                }\n            } else {\n                effect.setColor3(\"diffuseColor\", this.fluidColor);\n            }\n            if (this._useFixedThickness) {\n                effect.setFloat(\"thickness\", this.minimumThickness);\n                effect._bindTexture(\"bgDepthSampler\", this._bgDepthTexture);\n                if (engine.isWebGPU) {\n                    effect.setTextureSampler(\n                        \"bgDepthSamplerSampler\",\n                        this._bgDepthTexture ?? null\n                    );\n                }\n            } else {\n                if (!this._thicknessRenderTarget!.enableBlur) {\n                    effect.setTexture(\n                        \"thicknessSampler\",\n                        this._thicknessRenderTarget!.texture\n                    );\n                    if (engine.isWebGPU) {\n                        effect.setTextureSampler(\n                            \"thicknessSamplerSampler\",\n                            this._thicknessRenderTarget!.texture?.getInternalTexture() ??\n                                null\n                        );\n                    }\n                } else {\n                    effect.setTexture(\n                        \"thicknessSampler\",\n                        this._thicknessRenderTarget!.textureBlur\n                    );\n                    if (engine.isWebGPU) {\n                        effect.setTextureSampler(\n                            \"thicknessSamplerSampler\",\n                            this._thicknessRenderTarget!.textureBlur?.getInternalTexture() ??\n                                null\n                        );\n                    }\n                }\n                effect.setFloat(\"minimumThickness\", this.minimumThickness);\n            }\n\n            effect.setTexture(\n                \"reflectionSampler\",\n                this._scene.environmentTexture\n            );\n            if (engine.isWebGPU) {\n                effect.setTextureSampler(\n                    \"reflectionSamplerSampler\",\n                    this._scene.environmentTexture?.getInternalTexture() ?? null\n                );\n            }\n\n            effect.setMatrix(\"viewMatrix\", this._scene.getViewMatrix());\n            effect.setMatrix(\"invProjectionMatrix\", this._invProjectionMatrix);\n            effect.setMatrix(\n                \"projectionMatrix\",\n                this._scene.getProjectionMatrix()\n            );\n            effect.setVector2(\"texelSize\", texelSize);\n            effect.setFloat(\"density\", this.density);\n            effect.setFloat(\"refractionStrength\", this.refractionStrength);\n            effect.setFloat(\"fresnelClamp\", this.fresnelClamp);\n            effect.setFloat(\"specularPower\", this.specularPower);\n\n            effect.setVector3(\"dirLight\", this.dirLight);\n\n            effect.setFloat(\"cameraFar\", this._camera!.maxZ);\n\n            if (this._debug) {\n                let texture: BABYLON.Nullable<BABYLON.ThinTexture> = null;\n                switch (this._debugFeature) {\n                    case FluidRenderingDebug.DepthTexture:\n                        texture = this._depthRenderTarget!.texture;\n                        break;\n                    case FluidRenderingDebug.DepthBlurredTexture:\n                        texture = this._depthRenderTarget!.enableBlur\n                            ? this._depthRenderTarget!.textureBlur\n                            : this._depthRenderTarget!.texture;\n                        break;\n                    case FluidRenderingDebug.ThicknessTexture:\n                        texture = this._thicknessRenderTarget?.texture ?? null;\n                        break;\n                    case FluidRenderingDebug.ThicknessBlurredTexture:\n                        texture = this._thicknessRenderTarget?.enableBlur\n                            ? this._thicknessRenderTarget?.textureBlur ?? null\n                            : this._thicknessRenderTarget?.texture ?? null;\n                        break;\n                    case FluidRenderingDebug.DiffuseTexture:\n                        if (this._diffuseRenderTarget) {\n                            texture = this._diffuseRenderTarget.texture;\n                        }\n                        break;\n                }\n                if (this._debugFeature !== FluidRenderingDebug.Normals) {\n                    effect.setTexture(\"debugSampler\", texture);\n                    if (engine.isWebGPU) {\n                        effect.setTextureSampler(\n                            \"debugSamplerSampler\",\n                            texture?.getInternalTexture() ?? null\n                        );\n                    }\n                }\n            }\n        });\n\n        this._defaultPPLine = new BABYLON.DefaultRenderingPipeline(\n            \"defaultPipeline\", // The name of the pipeline\n            true, // Do you want the pipeline to use HDR texture?\n            this._scene, // The scene instance\n            [this._scene.activeCamera!] // The list of cameras to be attached to\n        );\n        this._defaultPPLine.depthOfFieldEnabled = true;\n        this._defaultPPLine.depthOfField.focalLength = 246.4;\n        this._defaultPPLine.depthOfField.fStop = 32;\n        this._defaultPPLine.depthOfField.focusDistance = 1000;\n        this._defaultPPLine.depthOfField.lensSize = 6;\n\n        this._defaultPPLine.fxaaEnabled = true;\n        this._defaultPPLine.fxaa.samples = 4;\n\n        this._defaultPPLine.imageProcessingEnabled = true;\n        this._defaultPPLine.imageProcessing.contrast = 1.8;\n        this._defaultPPLine.imageProcessing.exposure = 2.2;\n        this._defaultPPLine.imageProcessing.toneMappingEnabled = false;\n        this._defaultPPLine.imageProcessing.toneMappingType = BABYLON.ImageProcessingConfiguration.TONEMAPPING_ACES;\n\n        this._defaultPPLine.glowLayerEnabled = true;\n        if (this._defaultPPLine.glowLayer) {\n            this._defaultPPLine.glowLayer.blurKernelSize = 16;\n            this._defaultPPLine.glowLayer.intensity = 1.0;\n        }\n\n        // this._defaultPPLine.grainEnabled = true;\n        // this._defaultPPLine.grain.animated = true;\n        // this._defaultPPLine.grain.intensity = 8.2;\n\n        this._defaultPPLine.bloomEnabled = true;\n        \n    }\n\n    public clearTargets(): void {\n        if (this._depthRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\n            this._engine.clear(this._depthClearColor, true, true, false);\n            this._engine.unBindFramebuffer(\n                this._depthRenderTarget.renderTarget\n            );\n        }\n\n        if (this._diffuseRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(\n                this._diffuseRenderTarget.renderTarget\n            );\n            this._engine.clear(this._thicknessClearColor, true, true, false);\n            this._engine.unBindFramebuffer(\n                this._diffuseRenderTarget.renderTarget\n            );\n        }\n\n        if (this._thicknessRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(\n                this._thicknessRenderTarget.renderTarget\n            );\n            // we don't clear the depth buffer because it is the depth buffer that is coming from the scene and that we reuse in the thickness rendering pass\n            this._engine.clear(this._thicknessClearColor, true, false, false);\n            this._engine.unBindFramebuffer(\n                this._thicknessRenderTarget.renderTarget\n            );\n        }\n    }\n\n    public render(fluidObject: FluidRenderingObject): void {\n        if (this._needInitialization || !fluidObject.isReady()) {\n            return;\n        }\n\n        const currentRenderTarget = this._engine._currentRenderTarget;\n\n        this._engine.setState(false, undefined, undefined, undefined, true);\n        this._engine.setDepthBuffer(true);\n        this._engine.setDepthWrite(true);\n        this._engine.setAlphaMode(BABYLON.Constants.ALPHA_DISABLE);\n\n        // Render the particles in the depth texture\n        if (this._depthRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\n\n            fluidObject.renderDepthTexture();\n\n            this._engine.unbindInstanceAttributes();\n            this._engine.unBindFramebuffer(\n                this._depthRenderTarget.renderTarget\n            );\n        }\n\n        // Render the particles in the diffuse texture\n        if (this._diffuseRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(\n                this._diffuseRenderTarget.renderTarget\n            );\n\n            fluidObject.renderDiffuseTexture();\n\n            this._engine.unbindInstanceAttributes();\n            this._engine.unBindFramebuffer(\n                this._diffuseRenderTarget.renderTarget\n            );\n        }\n\n        // Render the particles in the thickness texture\n        if (this._thicknessRenderTarget?.renderTarget) {\n            this._engine.bindFramebuffer(\n                this._thicknessRenderTarget.renderTarget\n            );\n\n            fluidObject.renderThicknessTexture();\n\n            this._engine.unbindInstanceAttributes();\n            this._engine.unBindFramebuffer(\n                this._thicknessRenderTarget.renderTarget\n            );\n        }\n\n        // Run the blur post processes\n        this._depthRenderTarget?.applyBlurPostProcesses();\n        this._diffuseRenderTarget?.applyBlurPostProcesses();\n        this._thicknessRenderTarget?.applyBlurPostProcesses();\n\n        if (currentRenderTarget) {\n            this._engine.bindFramebuffer(currentRenderTarget);\n        }\n    }\n\n    public dispose(onlyPostProcesses = false): void {\n        if (!onlyPostProcesses) {\n            this._depthRenderTarget?.dispose();\n            this._depthRenderTarget = null;\n\n            this._diffuseRenderTarget?.dispose();\n            this._diffuseRenderTarget = null;\n\n            this._thicknessRenderTarget?.dispose();\n            this._thicknessRenderTarget = null;\n        }\n\n        if (this._renderPostProcess && this._camera) {\n            this._camera.detachPostProcess(this._renderPostProcess);\n        }\n        this._renderPostProcess?.dispose();\n        this._renderPostProcess = null;\n\n        this._needInitialization = false;\n    }\n}\n"],"names":["FluidRenderingRenderTarget","constructor","name","scene","width","height","blurTextureSizeX","blurTextureSizeY","textureType","textureFormat","blurTextureType","blurTextureFormat","useStandardBlur","camera","generateDepthBuffer","samples","enableBlur","blurSizeDivisor","blurFilterSize","_blurNumIterations","blurMaxFilterSize","blurDepthScale","particleSize","onDisposeObservable","this","_name","_scene","_camera","_engine","getEngine","_width","_height","_blurTextureSizeX","_blurTextureSizeY","_textureType","_textureFormat","_blurTextureType","_blurTextureFormat","_useStandardBlur","_generateDepthBuffer","_samples","_postProcessRunningIndex","_rt","_texture","_rtBlur","_textureBlurred","_blurPostProcesses","blurNumIterations","numIterations","blurX","blurY","Array","keys","map","elm","renderTarget","renderTargetBlur","texture","textureBlur","initialize","dispose","_createRenderTarget","rtBlur","textureBlurred","blurPostProcesses","_createBlurPostProcesses","applyBlurPostProcesses","postProcessManager","directRender","unBindFramebuffer","createRenderTargetTexture","generateMipMaps","type","format","samplingMode","generateStencilBuffer","renderTexture","wrapU","wrapV","anisotropicFilteringLevel","textureBlurSource","debugName","engine","targetSize","Math","floor","useBilinearFiltering","getCaps","textureFloatLinearFiltering","textureHalfFloatLinearFiltering","x","y","kernelBlurXPostprocess","undefined","externalTextureSamplerBinding","onApplyObservable","add","effect","setTexture","_bindTexture","inputTexture","setInt","setFloat2","onSizeChangedObservable","_textures","forEach","rt","_fixReusablePostProcess","kernelBlurYPostprocess","autoClear","uniforms","setFloat","_getProjectedParticleConstant","_getDepthThreshold","pp","isReusable","onActivateObservable","_currentRenderTextureInd","tan","fov","PI","hasObservers","notifyObservers","FluidRenderingDebug","FluidRenderingTargetRenderer","_defaultPPLine","_generateDiffuseTexture","fluidColor","surfaceColor","density","refractionStrength","fresnelClamp","specularPower","minimumThickness","dirLight","normalize","_debugFeature","DepthBlurredTexture","_debug","_enableBlurDepth","_blurDepthSizeDivisor","_blurDepthFilterSize","_blurDepthNumIterations","_blurDepthMaxFilterSize","_blurDepthDepthScale","_enableBlurThickness","_blurThicknessSizeDivisor","_blurThicknessFilterSize","_blurThicknessNumIterations","_useFixedThickness","onUseVelocityChanged","_useVelocity","_depthMapSize","_thicknessMapSize","_diffuseMapSize","activeCamera","_needInitialization","_bgDepthTexture","_invProjectionMatrix","_depthClearColor","_thicknessClearColor","_depthRenderTarget","_diffuseRenderTarget","_thicknessRenderTarget","_renderPostProcess","needInitialization","generateDiffuseTexture","generate","debugFeature","feature","debug","enableBlurDepth","enable","blurDepthSizeDivisor","scale","blurDepthFilterSize","filterSize","_setBlurParameters","blurDepthNumIterations","blurDepthMaxFilterSize","maxFilterSize","blurDepthDepthScale","enableBlurThickness","blurThicknessSizeDivisor","blurThicknessFilterSize","blurThicknessNumIterations","useFixedThickness","use","useVelocity","depthMapSize","size","thicknessMapSize","diffuseMapSize","renderPostProcess","depthRenderTarget","thicknessRenderTarget","diffuseRenderTarget","depthWidth","getRenderWidth","depthHeight","round","getRenderHeight","_initializeRenderTarget","diffuseWidth","diffuseHeight","thicknessWidth","thicknessHeight","_createLiquidRenderingPostProcess","_setBlurDepthParameters","_setBlurThicknessParameters","uniformNames","samplerNames","defines","texelSize","getSize","push","Normals","DiffuseRendering","DepthTexture","updateEffect","samplers","indexParameters","onCompiled","onError","vertexUrl","fragmentUrl","_postProcessDefines","_drawWrapper","createEffect","vertex","_vertexUrl","fragment","_fragmentUrl","_parameters","_samplers","_indexParameters","isWebGPU","join","copyFrom","getProjectionMatrix","invert","setColor3","setTextureSampler","getInternalTexture","environmentTexture","setMatrix","getViewMatrix","setVector2","setVector3","maxZ","ThicknessTexture","ThicknessBlurredTexture","DiffuseTexture","depthOfFieldEnabled","depthOfField","focalLength","fStop","focusDistance","lensSize","fxaaEnabled","fxaa","imageProcessingEnabled","imageProcessing","contrast","exposure","toneMappingEnabled","toneMappingType","glowLayerEnabled","glowLayer","blurKernelSize","intensity","bloomEnabled","clearTargets","bindFramebuffer","clear","render","fluidObject","isReady","currentRenderTarget","_currentRenderTarget","setState","setDepthBuffer","setDepthWrite","setAlphaMode","renderDepthTexture","unbindInstanceAttributes","renderDiffuseTexture","renderThicknessTexture","onlyPostProcesses","detachPostProcess"],"sourceRoot":""}