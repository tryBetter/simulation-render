{"version":3,"file":"101.fcc26e6ce4f9a237ba3b.js","mappings":"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","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/fluidSimulationDemoParticleCustomShape.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\n//import * as BABYLONSER from \"@babylonjs/serializers\";\n\nimport { FluidSimulationDemoBase } from \"./fluidSimulationDemoBase\";\nimport { FluidRenderingObjectVertexBuffer } from \"./FluidRenderer/fluidRenderingObjectVertexBuffer\";\n\nexport class FluidSimulationDemoParticleCustomShape extends FluidSimulationDemoBase {\n    private _initParticles: boolean;\n    private _started: boolean;\n    private _meshPCS: BABYLON.Nullable<BABYLON.Mesh>;\n    private _pcs: BABYLON.Nullable<BABYLON.PointsCloudSystem>;\n\n    constructor(scene: BABYLON.Scene) {\n        super(scene, true);\n\n        this._initParticles = true;\n        this._started = false;\n        this._meshPCS = null;\n        this._pcs = null;\n    }\n\n    protected async _run() {\n        const camera =\n            this._scene.activeCameras?.[0] ?? this._scene.activeCamera;\n\n        if (camera) {\n            (camera as BABYLON.ArcRotateCamera).alpha = 1.593 - Math.PI / 8;\n            (camera as BABYLON.ArcRotateCamera).beta = 1.3;\n            (camera as BABYLON.ArcRotateCamera).radius = 9.633;\n            (camera as BABYLON.ArcRotateCamera).computeWorldMatrix();\n            (camera as BABYLON.ArcRotateCamera).setTarget(\n                new BABYLON.Vector3(0, 3, 0)\n            );\n            (camera as BABYLON.ArcRotateCamera).beta = 1.3;\n            (camera as BABYLON.ArcRotateCamera).computeWorldMatrix();\n        }\n\n        await BABYLON.SceneLoader.AppendAsync(\n            \"https://assets.babylonjs.com/meshes/Dude/\",\n            \"dude.babylon\",\n            this._scene\n        );\n\n        this._scene.getCameraByName(\"Default camera\")?.dispose();\n\n        if (this._scene.activeCameras && this._scene.activeCameras.length > 0) {\n            this._scene.activeCameras[0] = camera!;\n        } else {\n            this._scene.activeCamera = camera;\n        }\n\n        this._pcs = new BABYLON.PointsCloudSystem(\"pcs\", 3, this._scene);\n\n        this._scene\n            .getMeshByName(\"him\")!\n            .getChildMeshes()\n            .forEach((m) => {\n                m.setEnabled(false);\n                m.scaling.setAll(0.1);\n                m.rotation.y = Math.PI / 8;\n                //m.rotation.y = Math.PI;\n                //(m as BABYLON.Mesh).bakeCurrentTransformIntoVertices();\n                (m.material as any).disableLighting = true;\n                (m.material as any).emissiveTexture = (\n                    m.material as any\n                ).diffuseTexture;\n                this._pcs!.addSurfacePoints(\n                    m as BABYLON.Mesh,\n                    5000,\n                    BABYLON.PointColor.Color,\n                    0\n                );\n            });\n\n        /*this._scene.useRightHandedSystem = true;\n        console.log(BABYLONSER.OBJExport.OBJ(this._scene.getMeshByName(\"him\")!.getChildMeshes()));\n        this._scene.useRightHandedSystem = false;*/\n\n        this._meshPCS = await this._pcs.buildMeshAsync();\n\n        this._meshPCS.setEnabled(false);\n\n        const positions: Float32Array = this._pcs.positions;\n        const origPositions = positions.slice(0);\n        const numParticles = positions.length / 3;\n\n        this._fluidRenderObject.object.vertexBuffers[\"position\"] =\n            new BABYLON.VertexBuffer(\n                this._engine,\n                positions,\n                BABYLON.VertexBuffer.PositionKind,\n                true,\n                false,\n                3,\n                true\n            );\n        this._fluidRenderObject.object.vertexBuffers[\"color\"] =\n            new BABYLON.VertexBuffer(\n                this._engine,\n                this._pcs.colors,\n                \"color\",\n                false,\n                false,\n                4,\n                true\n            );\n\n        (\n            this._fluidRenderObject.object as FluidRenderingObjectVertexBuffer\n        ).setNumParticles(numParticles);\n\n        this._fluidRenderObject.object.particleSize = 0.15;\n        this._fluidRenderObject.object.particleThicknessAlpha = 0.1;\n        this._fluidRenderObject.targetRenderer.minimumThickness = 0;\n        this._fluidRenderObject.targetRenderer.blurDepthFilterSize = 15;\n        this._fluidRenderObject.targetRenderer.blurDepthNumIterations = 8;\n        this._fluidRenderObject.targetRenderer.blurDepthDepthScale = 50;\n        this._fluidRenderObject.targetRenderer.thicknessMapSize = 1024;\n        this._fluidRenderObject.targetRenderer.density = 4.0;\n        this._fluidRenderObject.targetRenderer.generateDiffuseTexture = true;\n        this._fluidRenderObject.targetRenderer.fresnelClamp = 0.1;\n\n        const velocity: number[] = [];\n        const accel: number[] = [];\n        const stopped: number[] = [];\n\n        const initParticles = () => {\n            const min = new BABYLON.Vector3(1e10, 1e10, 1e10),\n                max = new BABYLON.Vector3(-1e10, -1e10, -1e10);\n            for (let i = 0; i < numParticles; ++i) {\n                min.x = Math.min(positions[i * 3 + 0], min.x);\n                min.y = Math.min(positions[i * 3 + 1], min.y);\n                min.z = Math.min(positions[i * 3 + 2], min.z);\n                max.x = Math.max(positions[i * 3 + 0], max.x);\n                max.y = Math.max(positions[i * 3 + 1], max.y);\n                max.z = Math.max(positions[i * 3 + 2], max.z);\n            }\n\n            velocity.length = 0;\n            accel.length = 0;\n            stopped.length = 0;\n\n            for (let i = 0; i < numParticles; ++i) {\n                const f = Math.random() * 0.005;\n                const g = Math.random() * 0.001;\n                const h = Math.random() * 0.005;\n\n                accel.push((-0.5 + Math.random()) * Math.random() * f);\n                accel.push(Math.random() * (Math.random() + 1.0) * g);\n                accel.push((-0.5 + Math.random()) * Math.random() * h);\n\n                velocity.push(0, 0, 0);\n\n                stopped.push(0);\n            }\n\n            this._initParticles = false;\n        };\n\n        const dt = 1 / 60 / 1000;\n        this._sceneObserver = this._scene.onBeforeRenderObservable.add(() => {\n            if (!this._started) {\n                return;\n            }\n\n            if (this._initParticles) {\n                positions.set(origPositions);\n                initParticles();\n                this._fluidRenderObject.object.vertexBuffers[\n                    \"position\"\n                ].updateDirectly(positions, 0);\n            }\n\n            if (this._paused) {\n                return;\n            }\n\n            let numStopped = 0;\n            for (let i = 0; i < numParticles; ++i) {\n                if (stopped[i]) {\n                    numStopped++;\n                    continue;\n                }\n                accel[i * 3 + 1] += -9.81 * dt;\n                velocity[i * 3 + 0] += accel[i * 3 + 0];\n                velocity[i * 3 + 1] += accel[i * 3 + 1];\n                velocity[i * 3 + 2] += accel[i * 3 + 2];\n                positions[i * 3 + 0] += velocity[i * 3 + 0];\n                positions[i * 3 + 1] += velocity[i * 3 + 1];\n                positions[i * 3 + 2] += velocity[i * 3 + 2];\n                if (positions[i * 3 + 1] <= -2) {\n                    //velocity[i * 3 + 0] *= Math.random() / 10 + 0.8;\n                    velocity[i * 3 + 1] *= -(Math.random() / 10 + 0.4);\n                    //velocity[i * 3 + 2] *= Math.random() / 10 + 0.8;\n                    if (positions[i * 3 + 1] + velocity[i * 3 + 1] < -2) {\n                        stopped[i] = 1;\n                    }\n                    positions[i * 3 + 1] = -2;\n                }\n            }\n\n            this._started == numStopped < numParticles;\n\n            this._fluidRenderObject.object.vertexBuffers[\n                \"position\"\n            ].updateDirectly(positions, 0);\n        });\n\n        super._run();\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this._scene.getMeshByName(\"him\")!.dispose(false, true);\n        /*this._scene.getMeshByName(\"him\")!.getChildMeshes().forEach((m) => {\n            m.dispose();\n        });*/\n\n        this._pcs?.dispose();\n    }\n\n    protected _makeGUIMainMenu(): void {\n        const params = {\n            paused: this._paused,\n            start: () => {\n                this._initParticles = true;\n                this._started = true;\n            },\n        };\n\n        const mainMenu = this._gui!;\n\n        mainMenu.add(params, \"start\").name(\"Start\");\n\n        mainMenu\n            .add(params, \"paused\")\n            .name(\"Pause\")\n            .onChange((value: boolean) => {\n                this._paused = value;\n            });\n    }\n}\n"],"names":["FluidSimulationDemoParticleCustomShape","FluidSimulationDemoBase","constructor","scene","super","this","_initParticles","_started","_meshPCS","_pcs","async","camera","_scene","activeCameras","activeCamera","alpha","Math","PI","beta","radius","computeWorldMatrix","setTarget","getCameraByName","dispose","length","getMeshByName","getChildMeshes","forEach","m","setEnabled","scaling","setAll","rotation","y","material","disableLighting","emissiveTexture","diffuseTexture","addSurfacePoints","buildMeshAsync","positions","origPositions","slice","numParticles","_fluidRenderObject","object","vertexBuffers","_engine","colors","setNumParticles","particleSize","particleThicknessAlpha","targetRenderer","minimumThickness","blurDepthFilterSize","blurDepthNumIterations","blurDepthDepthScale","thicknessMapSize","density","generateDiffuseTexture","fresnelClamp","velocity","accel","stopped","initParticles","min","max","i","x","z","f","random","g","h","push","_sceneObserver","onBeforeRenderObservable","add","set","updateDirectly","_paused","_run","_makeGUIMainMenu","params","paused","start","mainMenu","_gui","name","onChange","value"],"sourceRoot":""}