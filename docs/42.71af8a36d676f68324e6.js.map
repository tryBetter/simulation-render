{"version":3,"file":"42.71af8a36d676f68324e6.js","mappings":"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","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidSimulator2/fluidSimulator.ts","webpack://babylonjs-fluid-rendering/./src/scenes/FluidSimulator2/hash.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\nimport { Hash } from \"./hash\";\n\n// Based on https://github.com/rlguy/SPHFluidSim/blob/master/src/sphfluidsimulation.cpp\n\nexport interface IFluidParticle {\n    mass: number;\n    density: number;\n    pressure: number;\n    accelX: number;\n    accelY: number;\n    accelZ: number;\n}\n\nexport class FluidSimulator {\n    protected _particles: IFluidParticle[];\n    protected _numMaxParticles: number;\n    protected _positions: Float32Array;\n    protected _velocities: Float32Array;\n    protected _hash: Hash;\n\n    protected _smoothingRadius2: number;\n    protected _poly6Constant: number;\n    protected _spikyConstant: number;\n    protected _viscConstant: number;\n\n    protected _smoothingRadius = 0.2;\n\n    public get smoothingRadius() {\n        return this._smoothingRadius;\n    }\n\n    public set smoothingRadius(radius: number) {\n        this._smoothingRadius = radius;\n        this._computeConstants();\n    }\n\n    public densityReference = 2000;\n\n    public pressureConstant = 20;\n\n    public viscosity = 0.005;\n\n    public gravity = new BABYLON.Vector3(0, -9.8, 0);\n\n    public minTimeStep = 1 / 100;\n\n    public maxVelocity = 75;\n\n    public maxAcceleration = 2000;\n\n    public currentNumParticles: number;\n\n    private _mass: number;\n\n    public get mass() {\n        return this._mass;\n    }\n\n    public set mass(m: number) {\n        for (let i = 0; i < this._particles.length; ++i) {\n            this._particles[i].mass = m;\n        }\n    }\n\n    private _computeConstants(): void {\n        this._smoothingRadius2 = this._smoothingRadius * this._smoothingRadius;\n        this._poly6Constant =\n            315 / (64 * Math.PI * Math.pow(this._smoothingRadius, 9));\n        this._spikyConstant =\n            -45 / (Math.PI * Math.pow(this._smoothingRadius, 6));\n        this._viscConstant =\n            45 / (Math.PI * Math.pow(this._smoothingRadius, 6));\n        this._hash = new Hash(this._smoothingRadius, this._numMaxParticles);\n    }\n\n    public get positions() {\n        return this._positions;\n    }\n\n    public get velocities() {\n        return this._velocities;\n    }\n\n    public get numMaxParticles() {\n        return this._numMaxParticles;\n    }\n\n    public setParticleData(\n        positions?: Float32Array,\n        velocities?: Float32Array\n    ): void {\n        this._positions = positions ?? new Float32Array();\n        this._velocities = velocities ?? new Float32Array();\n        this._numMaxParticles = this._positions.length / 3;\n        this._hash = new Hash(this._smoothingRadius, this._numMaxParticles);\n\n        for (let i = this._particles.length; i < this._numMaxParticles; ++i) {\n            this._particles.push({\n                mass: this.mass,\n                density: 0,\n                pressure: 0,\n                accelX: 0,\n                accelY: 0,\n                accelZ: 0,\n            });\n        }\n    }\n\n    constructor(positions?: Float32Array, velocities?: Float32Array, mass = 1) {\n        this._positions = undefined as any;\n        this._velocities = undefined as any;\n        this._particles = [];\n        this._numMaxParticles = 0;\n        this._mass = mass;\n\n        if (positions && velocities) {\n            this.setParticleData(positions, velocities);\n        }\n\n        this._hash = new Hash(this._smoothingRadius, this._numMaxParticles);\n\n        this.currentNumParticles = this._numMaxParticles;\n\n        this._smoothingRadius2 = 0;\n        this._poly6Constant = 0;\n        this._spikyConstant = 0;\n        this._viscConstant = 0;\n\n        this._computeConstants();\n    }\n\n    public update(deltaTime: number): void {\n        let timeLeft = deltaTime;\n\n        while (timeLeft > 0) {\n            this._hash.create(this._positions, this.currentNumParticles);\n            this._computeDensityAndPressure();\n            this._computeAcceleration();\n\n            let timeStep = this._calculateTimeStep();\n\n            timeLeft -= timeStep;\n            if (timeLeft < 0) {\n                timeStep += timeLeft;\n                timeLeft = 0;\n            }\n\n            this._updatePositions(timeStep);\n        }\n    }\n\n    public dispose(): void {\n        // nothing to do\n    }\n\n    protected _computeDensityAndPressure(): void {\n        for (let a = 0; a < this.currentNumParticles; ++a) {\n            const pA = this._particles[a];\n            const paX = this._positions[a * 3 + 0];\n            const paY = this._positions[a * 3 + 1];\n            const paZ = this._positions[a * 3 + 2];\n\n            pA.density = 0;\n\n            this._hash.query(this._positions, a, this._smoothingRadius);\n\n            for (let ib = 0; ib < this._hash.querySize; ++ib) {\n                const b = this._hash.queryIds[ib];\n                const diffX = paX - this._positions[b * 3 + 0];\n                const diffY = paY - this._positions[b * 3 + 1];\n                const diffZ = paZ - this._positions[b * 3 + 2];\n                const r2 = diffX * diffX + diffY * diffY + diffZ * diffZ;\n\n                if (r2 < this._smoothingRadius2) {\n                    const w =\n                        this._poly6Constant *\n                        Math.pow(this._smoothingRadius2 - r2, 3);\n                    pA.density += w;\n                }\n            }\n\n            pA.density = Math.max(this.densityReference, pA.density);\n            pA.pressure =\n                this.pressureConstant * (pA.density - this.densityReference);\n        }\n    }\n\n    protected _computeAcceleration(): void {\n        // Pressurce-based acceleration + viscosity-based acceleration computation\n        for (let a = 0; a < this.currentNumParticles; ++a) {\n            const pA = this._particles[a];\n            const paX = this._positions[a * 3 + 0];\n            const paY = this._positions[a * 3 + 1];\n            const paZ = this._positions[a * 3 + 2];\n\n            const vaX = this._velocities[a * 3 + 0];\n            const vaY = this._velocities[a * 3 + 1];\n            const vaZ = this._velocities[a * 3 + 2];\n\n            let pressureAccelX = 0;\n            let pressureAccelY = 0;\n            let pressureAccelZ = 0;\n\n            let viscosityAccelX = 0;\n            let viscosityAccelY = 0;\n            let viscosityAccelZ = 0;\n\n            this._hash.query(this._positions, a, this._smoothingRadius);\n\n            for (let ib = 0; ib < this._hash.querySize; ++ib) {\n                const b = this._hash.queryIds[ib];\n                let diffX = paX - this._positions[b * 3 + 0];\n                let diffY = paY - this._positions[b * 3 + 1];\n                let diffZ = paZ - this._positions[b * 3 + 2];\n                const r2 = diffX * diffX + diffY * diffY + diffZ * diffZ;\n                const r = Math.sqrt(r2);\n\n                if (r > 0 && r2 < this._smoothingRadius2) {\n                    const pB = this._particles[b];\n\n                    diffX /= r;\n                    diffY /= r;\n                    diffZ /= r;\n\n                    const w =\n                        this._spikyConstant *\n                        (this._smoothingRadius - r) *\n                        (this._smoothingRadius - r);\n                    const massRatio = pB.mass / pA.mass;\n                    const fp =\n                        w *\n                        ((pA.pressure + pB.pressure) /\n                            (2 * pA.density * pB.density)) *\n                        massRatio;\n\n                    pressureAccelX -= fp * diffX;\n                    pressureAccelY -= fp * diffY;\n                    pressureAccelZ -= fp * diffZ;\n\n                    const w2 = this._viscConstant * (this._smoothingRadius - r);\n                    const fv =\n                        w2 * (1 / pB.density) * massRatio * this.viscosity;\n\n                    viscosityAccelX += fv * (this._velocities[b * 3 + 0] - vaX);\n                    viscosityAccelY += fv * (this._velocities[b * 3 + 1] - vaY);\n                    viscosityAccelZ += fv * (this._velocities[b * 3 + 2] - vaZ);\n                }\n            }\n\n            pA.accelX = pressureAccelX + viscosityAccelX;\n            pA.accelY = pressureAccelY + viscosityAccelY;\n            pA.accelZ = pressureAccelZ + viscosityAccelZ;\n\n            pA.accelX += this.gravity.x;\n            pA.accelY += this.gravity.y;\n            pA.accelZ += this.gravity.z;\n\n            const mag = Math.sqrt(\n                pA.accelX * pA.accelX +\n                    pA.accelY * pA.accelY +\n                    pA.accelZ * pA.accelZ\n            );\n\n            if (mag > this.maxAcceleration) {\n                pA.accelX = (pA.accelX / mag) * this.maxAcceleration;\n                pA.accelY = (pA.accelY / mag) * this.maxAcceleration;\n                pA.accelZ = (pA.accelZ / mag) * this.maxAcceleration;\n            }\n        }\n    }\n\n    protected _calculateTimeStep() {\n        let maxVelocity = 0;\n        let maxAcceleration = 0;\n        let maxSpeedOfSound = 0;\n\n        for (let a = 0; a < this.currentNumParticles; ++a) {\n            const pA = this._particles[a];\n\n            const velSq =\n                this._velocities[a * 3 + 0] * this._velocities[a * 3 + 0] +\n                this._velocities[a * 3 + 1] * this._velocities[a * 3 + 1] +\n                this._velocities[a * 3 + 2] * this._velocities[a * 3 + 2];\n            const accSq =\n                pA.accelX * pA.accelX +\n                pA.accelY * pA.accelY +\n                pA.accelZ * pA.accelZ;\n            const spsSq = pA.density < 0.00001 ? 0 : pA.pressure / pA.density;\n\n            if (velSq > maxVelocity) {\n                maxVelocity = velSq;\n            }\n            if (accSq > maxAcceleration) {\n                maxAcceleration = accSq;\n            }\n            if (spsSq > maxSpeedOfSound) {\n                maxSpeedOfSound = spsSq;\n            }\n        }\n\n        maxVelocity = Math.sqrt(maxVelocity);\n        maxAcceleration = Math.sqrt(maxAcceleration);\n        maxSpeedOfSound = Math.sqrt(maxSpeedOfSound);\n\n        const velStep = (0.4 * this.smoothingRadius) / Math.max(1, maxVelocity);\n        const accStep = 0.4 * Math.sqrt(this.smoothingRadius / maxAcceleration);\n        const spsStep = this.smoothingRadius / maxSpeedOfSound;\n\n        return Math.max(this.minTimeStep, Math.min(velStep, accStep, spsStep));\n    }\n\n    protected _updatePositions(deltaTime: number): void {\n        for (let a = 0; a < this.currentNumParticles; ++a) {\n            const pA = this._particles[a];\n\n            this._velocities[a * 3 + 0] += pA.accelX * deltaTime;\n            this._velocities[a * 3 + 1] += pA.accelY * deltaTime;\n            this._velocities[a * 3 + 2] += pA.accelZ * deltaTime;\n\n            const mag = Math.sqrt(\n                this._velocities[a * 3 + 0] * this._velocities[a * 3 + 0] +\n                    this._velocities[a * 3 + 1] * this._velocities[a * 3 + 1] +\n                    this._velocities[a * 3 + 2] * this._velocities[a * 3 + 2]\n            );\n\n            if (mag > this.maxVelocity) {\n                this._velocities[a * 3 + 0] =\n                    (this._velocities[a * 3 + 0] / mag) * this.maxVelocity;\n                this._velocities[a * 3 + 1] =\n                    (this._velocities[a * 3 + 1] / mag) * this.maxVelocity;\n                this._velocities[a * 3 + 2] =\n                    (this._velocities[a * 3 + 2] / mag) * this.maxVelocity;\n            }\n\n            this._positions[a * 3 + 0] +=\n                deltaTime * this._velocities[a * 3 + 0];\n            this._positions[a * 3 + 1] +=\n                deltaTime * this._velocities[a * 3 + 1];\n            this._positions[a * 3 + 2] +=\n                deltaTime * this._velocities[a * 3 + 2];\n        }\n    }\n}\n","/**\n * From https://github.com/matthias-research/pages/blob/master/tenMinutePhysics/11-hashing.html\n */\n\nexport class Hash {\n    private _spacing: number;\n    private _tableSize: number;\n    private _cellStart: Int32Array;\n    private _cellEntries: Int32Array;\n    private _queryIds: Int32Array;\n    private _querySize: number;\n\n    public get querySize() {\n        return this._querySize;\n    }\n\n    public get queryIds() {\n        return this._queryIds;\n    }\n\n    constructor(spacing: number, maxNumObjects: number) {\n        this._spacing = spacing;\n        this._tableSize = 2 * maxNumObjects;\n        this._cellStart = new Int32Array(this._tableSize + 1);\n        this._cellEntries = new Int32Array(maxNumObjects);\n        this._queryIds = new Int32Array(maxNumObjects);\n        this._querySize = 0;\n    }\n\n    public hashCoords(xi: number, yi: number, zi: number) {\n        const h = (xi * 92837111) ^ (yi * 689287499) ^ (zi * 283923481); // fantasy function\n        //const h = (xi * 73856093) ^ (yi * 19349663) ^ (zi * 83492791); // fantasy function\n        return Math.abs(h) % this._tableSize;\n    }\n\n    public intCoord(coord: number) {\n        return Math.floor(coord / this._spacing);\n    }\n\n    public hashPos(pos: number[] | Float32Array, nr: number) {\n        return this.hashCoords(\n            this.intCoord(pos[3 * nr]),\n            this.intCoord(pos[3 * nr + 1]),\n            this.intCoord(pos[3 * nr + 2])\n        );\n    }\n\n    public create(pos: number[] | Float32Array, numElements?: number) {\n        numElements = numElements ?? pos.length / 3;\n\n        const numObjects = Math.min(numElements, this._cellEntries.length);\n\n        // determine cell sizes\n        this._cellStart.fill(0);\n        this._cellEntries.fill(0);\n\n        for (let i = 0; i < numObjects; i++) {\n            const h = this.hashPos(pos, i);\n            this._cellStart[h]++;\n        }\n\n        // determine cells starts\n        let start = 0;\n        for (let i = 0; i < this._tableSize; i++) {\n            start += this._cellStart[i];\n            this._cellStart[i] = start;\n        }\n        this._cellStart[this._tableSize] = start; // guard\n\n        // fill in objects ids\n        for (let i = 0; i < numObjects; i++) {\n            const h = this.hashPos(pos, i);\n            this._cellStart[h]--;\n            this._cellEntries[this._cellStart[h]] = i;\n        }\n    }\n\n    public query(pos: number[] | Float32Array, nr: number, maxDist: number) {\n        const x0 = this.intCoord(pos[3 * nr] - maxDist);\n        const y0 = this.intCoord(pos[3 * nr + 1] - maxDist);\n        const z0 = this.intCoord(pos[3 * nr + 2] - maxDist);\n\n        const x1 = this.intCoord(pos[3 * nr] + maxDist);\n        const y1 = this.intCoord(pos[3 * nr + 1] + maxDist);\n        const z1 = this.intCoord(pos[3 * nr + 2] + maxDist);\n\n        this._querySize = 0;\n\n        for (let xi = x0; xi <= x1; xi++) {\n            for (let yi = y0; yi <= y1; yi++) {\n                for (let zi = z0; zi <= z1; zi++) {\n                    const h = this.hashCoords(xi, yi, zi);\n                    const start = this._cellStart[h];\n                    const end = this._cellStart[h + 1];\n\n                    for (let i = start; i < end; i++) {\n                        this._queryIds[this._querySize] = this._cellEntries[i];\n                        this._querySize++;\n                    }\n                }\n            }\n        }\n    }\n}\n"],"names":["FluidSimulator","constructor","positions","velocities","mass","_smoothingRadius","densityReference","pressureConstant","viscosity","gravity","minTimeStep","maxVelocity","maxAcceleration","this","_positions","undefined","_velocities","_particles","_numMaxParticles","_mass","setParticleData","_hash","Hash","currentNumParticles","_smoothingRadius2","_poly6Constant","_spikyConstant","_viscConstant","_computeConstants","smoothingRadius","radius","m","i","length","Math","PI","pow","numMaxParticles","Float32Array","push","density","pressure","accelX","accelY","accelZ","update","deltaTime","timeLeft","create","_computeDensityAndPressure","_computeAcceleration","timeStep","_calculateTimeStep","_updatePositions","dispose","a","pA","paX","paY","paZ","query","ib","querySize","b","queryIds","diffX","diffY","diffZ","r2","w","max","vaX","vaY","vaZ","pressureAccelX","pressureAccelY","pressureAccelZ","viscosityAccelX","viscosityAccelY","viscosityAccelZ","r","sqrt","pB","massRatio","fp","fv","x","y","z","mag","maxSpeedOfSound","velSq","accSq","spsSq","velStep","accStep","spsStep","min","spacing","maxNumObjects","_spacing","_tableSize","_cellStart","Int32Array","_cellEntries","_queryIds","_querySize","hashCoords","xi","yi","zi","h","abs","intCoord","coord","floor","hashPos","pos","nr","numElements","numObjects","fill","start","maxDist","x0","y0","z0","x1","y1","z1","end"],"sourceRoot":""}