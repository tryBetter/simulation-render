{"version":3,"file":"282.2b623f30b15d65d249c3.js","mappings":"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","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/Utils/particleGenerator.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\n\nexport class ParticleGenerator {\n    private _scene: BABYLON.Scene;\n    private _observer: BABYLON.Nullable<BABYLON.Observer<BABYLON.Scene>>;\n    private _currNumParticles: number;\n    private _numCrossSection: number;\n    private _numParticles = 0;\n    private _positions: Float32Array;\n    private _velocities: Float32Array;\n    private _loadFromFile: string | undefined;\n\n    public particleRadius: number;\n\n    public position: BABYLON.Vector3;\n\n    public get currNumParticles() {\n        return this._currNumParticles;\n    }\n\n    public get positions() {\n        return this._positions;\n    }\n\n    public get velocities() {\n        return this._velocities;\n    }\n\n    constructor(scene: BABYLON.Scene, loadFromFile?: string) {\n        this._scene = scene;\n        this._currNumParticles = 0;\n        this._numCrossSection = 0;\n        this._positions = new Float32Array();\n        this._velocities = new Float32Array();\n        this.particleRadius = 0;\n        this._loadFromFile = loadFromFile;\n        this.position = new BABYLON.Vector3(0, 0, 0);\n\n        if (!this._loadFromFile) {\n            this._observer = scene.onBeforeRenderObservable.add(() => {\n                if (this._currNumParticles === 0) {\n                    if (this._positions.length / 3 >= this._numCrossSection) {\n                        this._currNumParticles = this._numCrossSection;\n                    }\n                } else if (this._currNumParticles < this._numParticles) {\n                    const px1 = this._positions[this._currNumParticles * 3 + 0];\n                    const py1 = this._positions[this._currNumParticles * 3 + 1];\n                    const pz1 = this._positions[this._currNumParticles * 3 + 2];\n\n                    const px2 =\n                        this._positions[\n                            (this._currNumParticles - this._numCrossSection) *\n                                3 +\n                                0\n                        ];\n                    const py2 =\n                        this._positions[\n                            (this._currNumParticles - this._numCrossSection) *\n                                3 +\n                                1\n                        ];\n                    const pz2 =\n                        this._positions[\n                            (this._currNumParticles - this._numCrossSection) *\n                                3 +\n                                2\n                        ];\n\n                    const dist = Math.sqrt(\n                        (px1 - px2) * (px1 - px2) +\n                            (py1 - py2) * (py1 - py2) +\n                            (pz1 - pz2) * (pz1 - pz2)\n                    );\n\n                    if (dist > this.particleRadius * 2) {\n                        this._currNumParticles += this._numCrossSection;\n                    }\n                }\n            });\n        } else {\n            this._observer = null;\n        }\n    }\n\n    public async generateParticles(\n        numTotParticles: number,\n        regenerateAll = true\n    ) {\n        if (this._loadFromFile) {\n            await this._generateParticlesFromFile(this._loadFromFile);\n        } else {\n            this._generateParticles(numTotParticles, regenerateAll);\n        }\n    }\n\n    private async _generateParticlesFromFile(fileName: string) {\n        const data = await (\n            await fetch(`/assets/particles/${fileName}.txt`)\n        ).text();\n\n        const lines = data.replace(\"\\r\", \"\").split(\"\\n\");\n\n        const particlePos = [];\n        const particleVel = [];\n\n        let numParticles = 0;\n\n        for (let i = 1; i < lines.length; ++i) {\n            const line = lines[i];\n            const vals = line.split(\",\");\n            if (line.charAt(0) === '\"' || vals.length < 4) {\n                continue;\n            }\n            particlePos.push(\n                parseFloat(vals[1]) + this.position.x,\n                parseFloat(vals[2]) + +this.position.y,\n                parseFloat(vals[3]) + this.position.z\n            );\n            particleVel.push(0, 0, 0);\n            numParticles++;\n        }\n\n        const particleStartIndex = 0;\n\n        this._numParticles = this._numCrossSection = numParticles;\n\n        if (this._numParticles > this._positions.length / 3) {\n            const newPositions = new Float32Array(this._numParticles * 3);\n            const newVelocities = new Float32Array(this._numParticles * 3);\n\n            newPositions.set(this._positions, 0);\n            newVelocities.set(this._velocities, 0);\n\n            this._positions = newPositions;\n            this._velocities = newVelocities;\n        }\n\n        this._positions.set(particlePos, particleStartIndex * 3);\n        this._velocities.set(particleVel, particleStartIndex * 3);\n\n        this._currNumParticles = this._numParticles;\n    }\n\n    private _generateParticles(\n        numTotParticles: number,\n        regenerateAll = true\n    ): void {\n        if (this._numParticles >= numTotParticles && !regenerateAll) {\n            this._numParticles = numTotParticles;\n            this._currNumParticles = Math.min(\n                this._currNumParticles,\n                this._numParticles\n            );\n            return;\n        }\n\n        const dimX = 12,\n            dimY = 12;\n\n        const particlePos = [];\n        const particleVel = [];\n\n        const distance = this.particleRadius * 2;\n        const jitter = distance * 0.1;\n        const getJitter = () => Math.random() * jitter - jitter / 2;\n\n        const particleStartIndex = regenerateAll ? 0 : this._currNumParticles;\n\n        this._numParticles = particleStartIndex;\n\n        while (this._numParticles <= numTotParticles - this._numCrossSection) {\n            let yCoord = (dimY / 2) * distance;\n\n            this._numCrossSection = 0;\n            for (let y = 1; y < dimY - 1; ++y) {\n                const angle = (y * Math.PI) / (dimY - 1);\n\n                let x2 = ((Math.sin(angle) * dimX) / 2) * distance;\n                if (x2 < 0) {\n                    x2 = 0;\n                }\n\n                let xCoord = -x2;\n                while (xCoord <= x2) {\n                    const xc =\n                        xCoord === -x2 || xCoord + distance > x2\n                            ? xCoord\n                            : xCoord + getJitter();\n                    const yc =\n                        xCoord === -x2 || xCoord + distance > x2\n                            ? yCoord\n                            : yCoord + getJitter();\n                    const zCoord =\n                        xCoord === -x2 || xCoord + distance > x2\n                            ? 0.49\n                            : 0.49 + getJitter();\n                    particlePos.push(\n                        xc + this.position.x,\n                        yc + this.position.y,\n                        zCoord + this.position.z\n                    );\n                    particleVel.push(\n                        (Math.random() - 0.5) * 0.03,\n                        (Math.random() - 0.5) * 0.03,\n                        (Math.random() - 1.0) * 0.03 - 1.5\n                    );\n                    xCoord += distance;\n                    this._numParticles++;\n                    this._numCrossSection++;\n                }\n\n                yCoord += distance;\n            }\n        }\n\n        if (this._numParticles > this._positions.length / 3) {\n            const newPositions = new Float32Array(this._numParticles * 3);\n            const newVelocities = new Float32Array(this._numParticles * 3);\n\n            newPositions.set(this._positions, 0);\n            newVelocities.set(this._velocities, 0);\n\n            this._positions = newPositions;\n            this._velocities = newVelocities;\n        }\n\n        this._positions.set(particlePos, particleStartIndex * 3);\n        this._velocities.set(particleVel, particleStartIndex * 3);\n\n        this._currNumParticles = particleStartIndex;\n    }\n\n    public dispose(): void {\n        this._scene.onBeforeRenderObservable.remove(this._observer);\n        this._observer = null;\n    }\n}\n"],"names":["ParticleGenerator","constructor","scene","loadFromFile","_numParticles","this","_scene","_currNumParticles","_numCrossSection","_positions","Float32Array","_velocities","particleRadius","_loadFromFile","position","_observer","onBeforeRenderObservable","add","length","px1","py1","pz1","px2","py2","pz2","Math","sqrt","currNumParticles","positions","velocities","async","numTotParticles","regenerateAll","_generateParticlesFromFile","_generateParticles","fileName","lines","fetch","text","replace","split","particlePos","particleVel","numParticles","i","line","vals","charAt","push","parseFloat","x","y","z","newPositions","newVelocities","set","particleStartIndex","min","distance","jitter","getJitter","random","yCoord","dimY","angle","PI","x2","sin","xCoord","xc","yc","zCoord","dispose","remove"],"sourceRoot":""}