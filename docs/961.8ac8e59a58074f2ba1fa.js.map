{"version":3,"file":"961.8ac8e59a58074f2ba1fa.js","mappings":"+MAIA,MAAMA,EAAqB,gBA2B3BC,OAAOC,eAAe,kBAAyB,gBAAiB,CAC5DC,IAAK,WACD,OAAOC,KAAKC,cAChB,EACAC,IAAK,SAEDC,GAEAH,KAAKC,eAAiBE,CAC1B,EACAC,YAAY,EACZC,cAAc,IAGlB,sCACI,WACI,OAAIL,KAAKC,iBAITD,KAAKC,eAAiB,IAAI,EAAAK,cAAcN,OAH7BA,KAAKC,cAMpB,EAEJ,uCAA+C,W,MACxB,QAAnB,EAAAD,KAAKC,sBAAc,SAAEM,UACrBP,KAAKC,eAAiB,IAC1B,EAMO,MAAMO,EAeTC,YAAYC,GAXI,KAAAC,KAAOf,EAYnBI,KAAKU,MAAQA,CACjB,CAKOE,WACHZ,KAAKU,MAAMG,sCAAsCC,aAnFC,EAqF9Cd,KACAA,KAAKe,kCAETf,KAAKU,MAAMM,sBAAsBF,aAvFE,EAyF/Bd,KACAA,KAAKiB,iBAEb,CAEQF,mC,MACoB,QAAxB,EAAAf,KAAKU,MAAMQ,qBAAa,SAAEC,mBAC9B,CAEQF,iBAAiBG,G,MACG,QAAxB,EAAApB,KAAKU,MAAMQ,qBAAa,SAAEG,QAAQD,EACtC,CAMOE,UACCtB,KAAKU,MAAMT,iBAEXD,KAAKU,MAAMa,uBAGXvB,KAAKU,MAAMc,sBAEnB,CAKOjB,UACHP,KAAKU,MAAMa,sBACf,EAGJ,EAAAjB,cAAA,8BAA+CI,IAC3C,IAAIe,EAAYf,EAAMgB,cAClB9B,GAEC6B,IACDA,EAAY,IAAIjB,EAA4BE,GAC5CA,EAAMiB,cAAcF,G","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRendererSceneComponent.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\n\nimport { FluidRenderer } from \"./fluidRenderer\";\n\nconst NAME_FLUIDRENDERER = \"FluidRenderer\";\nconst STEP_GATHERACTIVECAMERARENDERTARGET_FLUIDRENDERER = 1;\nconst STEP_AFTERCAMERADRAW_FLUIDRENDERER = 5;\n\ndeclare module \"@babylonjs/core/abstractScene\" {\n    export interface AbstractScene {\n        /** @hidden (Backing field) */\n        _fluidRenderer: BABYLON.Nullable<FluidRenderer>;\n\n        /**\n         * Gets or Sets the fluid renderer associated to the scene.\n         */\n        fluidRenderer: BABYLON.Nullable<FluidRenderer>;\n\n        /**\n         * Enables the fluid renderer and associates it with the scene\n         * @returns the FluidRenderer\n         */\n        enableFluidRenderer(): BABYLON.Nullable<FluidRenderer>;\n\n        /**\n         * Disables the fluid renderer associated with the scene\n         */\n        disableFluidRenderer(): void;\n    }\n}\n\nObject.defineProperty(BABYLON.Scene.prototype, \"fluidRenderer\", {\n    get: function (this: BABYLON.Scene) {\n        return this._fluidRenderer;\n    },\n    set: function (\n        this: BABYLON.Scene,\n        value: BABYLON.Nullable<FluidRenderer>\n    ) {\n        this._fluidRenderer = value;\n    },\n    enumerable: true,\n    configurable: true,\n});\n\nBABYLON.Scene.prototype.enableFluidRenderer =\n    function (): BABYLON.Nullable<FluidRenderer> {\n        if (this._fluidRenderer) {\n            return this._fluidRenderer;\n        }\n\n        this._fluidRenderer = new FluidRenderer(this);\n\n        return this._fluidRenderer;\n    };\n\nBABYLON.Scene.prototype.disableFluidRenderer = function (): void {\n    this._fluidRenderer?.dispose();\n    this._fluidRenderer = null;\n};\n\n/**\n * Defines the Geometry Buffer scene component responsible to manage a G-Buffer useful\n * in several rendering techniques.\n */\nexport class FluidRendererSceneComponent implements BABYLON.ISceneComponent {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    public readonly name = NAME_FLUIDRENDERER;\n\n    /**\n     * The scene the component belongs to.\n     */\n    public scene: BABYLON.Scene;\n\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    constructor(scene: BABYLON.Scene) {\n        this.scene = scene;\n    }\n\n    /**\n     * Registers the component in a given scene\n     */\n    public register(): void {\n        this.scene._gatherActiveCameraRenderTargetsStage.registerStep(\n            STEP_GATHERACTIVECAMERARENDERTARGET_FLUIDRENDERER,\n            this,\n            this._gatherActiveCameraRenderTargets\n        );\n        this.scene._afterCameraDrawStage.registerStep(\n            STEP_AFTERCAMERADRAW_FLUIDRENDERER,\n            this,\n            this._afterCameraDraw\n        );\n    }\n\n    private _gatherActiveCameraRenderTargets(/*renderTargets: BABYLON.SmartArrayNoDuplicate<BABYLON.RenderTargetTexture>*/): void {\n        this.scene.fluidRenderer?._prepareRendering();\n    }\n\n    private _afterCameraDraw(camera: BABYLON.Camera) {\n        this.scene.fluidRenderer?._render(camera);\n    }\n\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    public rebuild(): void {\n        if (this.scene._fluidRenderer) {\n            // Release resources first\n            this.scene.disableFluidRenderer();\n\n            // Re-enable\n            this.scene.enableFluidRenderer();\n        }\n    }\n\n    /**\n     * Disposes the component and the associated resources\n     */\n    public dispose(): void {\n        this.scene.disableFluidRenderer();\n    }\n}\n\nFluidRenderer._SceneComponentInitialization = (scene: BABYLON.Scene) => {\n    let component = scene._getComponent(\n        NAME_FLUIDRENDERER\n    ) as FluidRendererSceneComponent;\n    if (!component) {\n        component = new FluidRendererSceneComponent(scene);\n        scene._addComponent(component);\n    }\n};\n"],"names":["NAME_FLUIDRENDERER","Object","defineProperty","get","this","_fluidRenderer","set","value","enumerable","configurable","FluidRenderer","dispose","FluidRendererSceneComponent","constructor","scene","name","register","_gatherActiveCameraRenderTargetsStage","registerStep","_gatherActiveCameraRenderTargets","_afterCameraDrawStage","_afterCameraDraw","fluidRenderer","_prepareRendering","camera","_render","rebuild","disableFluidRenderer","enableFluidRenderer","component","_getComponent","_addComponent"],"sourceRoot":""}